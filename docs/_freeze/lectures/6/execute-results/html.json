{
  "hash": "c3ae584818711c24c7847e409e2970b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Monte Carlo Methods\"\nsubtitle: \"Statistical Inference\"\nformat:\n  revealjs:\n    include-in-header: \"math_commands.html\"\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nengine: knitr\nknitr:\n  opts_chunk: \n    code-fold: true\n    echo: true\n    eval: true\n    comment: \"#>\" \nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - code-fullscreen\n  - webr\nwebr: \n  show-startup-message: true\n  packages: ['ggplot2', 'dplyr', 'stringr']\neditor_options: \n  chunk_output_type: console\n---\n\n## R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\ntheme_set(theme_bw())\ntheme_update(axis.title = element_text(size = 24))\n\n\ntuesdata <- tidytuesdayR::tt_load(2020, week = 28)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> \tDownloading file 1 of 1: `coffee_ratings.csv`\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ncoffee_ratings <- tuesdata$coffee_ratings\ncoffee_aroma <- coffee_ratings |> filter(aroma > 5.5)\n\nshuffle <- function(x){\n  n <- length(x)\n  return(sample(x, n))\n}\n\npenguins <- penguins |> drop_na() \n```\n:::\n\n\n\n# Power Analysis\n\n## Type 1 and 2 Error\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\na1 <- data.frame(\n   x = c(2.5,3.5),\n   y = c(41, 41),\n   label = c(\"Yes\", \"No\")\n)\n\na2 <- data.frame(\n   x = c(1.9),\n   y = c(25, 35),\n   label = c(\"False\", \"True\")\n)\na3 <- tibble(x = c(1.7,3), \n             y = c(30, 43), \n             label = c(\"H0\", \"Reject H0\"))\n\nyay <- tibble(x = c(2.5, 3.5), \n              y = c(25, 35), \n              label = c(\"Yay!\", \"Yay!\"))\n\ntype1 <- tibble(x = c(2.5, 3.5),\n                y = c(36.5, 26.5),\n                label = c(\"Type I Error\", \"Type II Error\"))\n\ntype2 <- tibble(x = c(3.5, 2.5),\n                y = c(24.5, 34.5),\n                label = c(\"beta\", \"alpha\"))\n\n\n# basic graph\np <- ggplot() + theme_void()\n\n# Add rectangles\np + annotate(\"rect\", \n             xmin=c(2,3), xmax=c(3,4), \n             ymin=c(20,20), ymax=c(30,30), \n             alpha=0.2, color=\"green\", fill=\"green\") + \n    annotate(\"rect\", \n             xmin=c(2,3), xmax=c(3,4), \n             ymin=c(30,30), ymax=c(40,40), \n             alpha=0.2, color=\"red\", fill=\"red\") +\n    annotate(\"rect\",\n             xmin=c(3,2), xmax=c(4,3),\n             ymin=c(30, 20), ymax=c(40, 30),\n             alpha=0.8, color=\"royalblue\", fill=\"royalblue\") +\n    geom_text(data=a1, aes(x=x, y=y, label=label),\n             size=10 , fontface=\"bold\" ) +\n    geom_text(data=a3, aes(x=x, y=y, label=label),\n             size=10 , fontface=\"bold.italic\" ) +\n    geom_text(data=a2, aes(x=x, y=y, label=label),\n             size=10, angle = 90, fontface=\"bold\" ) +\n    geom_text(data=yay, aes(x=x, y=y, label=label),\n             size=10, fontface=\"bold.italic\" ) +\n    geom_text(data=type1, aes(x=x, y=y, label=label),\n             size=10, fontface=\"bold\") +\n    geom_text(data=type2, aes(x=x, y=y, label=label),\n             size=10, fontface=\"bold\", parse = T ) \n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n\n## Type 1 and 2 Error\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- seq(-4, 4, length.out = 1000)\nxx <- seq(-1, 7, length.out = 1000)\ndt_one<-function(x){\n            y <- dnorm(x)\n            y[x < qnorm(.94)] <-NA\n            return(y)\n}\ndt_two<-function(x){\n            y <- dnorm(x, mean = 3)\n            y[x > 1.645] <-NA\n            return(y)\n}\ndf1 <- tibble(x = x, y = dnorm(x))\ndf2 <- tibble(x = xx, y = dnorm(xx, mean = 3))\n\na1 <- tibble(x = c(0,3), y = c(0.43, 0.43), label = c(\"H0\", \"H1\"))\na2 <- tibble(x = c(2.05,1.25), y = c(0.02, 0.02), label = c(paste(\"alpha\"), \"beta\"))\n\ndf1 |> \n  ggplot(aes(x, y)) +\n    stat_function(fun = dt_one, geom = \"area\", fill = \"red\") +\n    geom_line() +\n    geom_line(aes(x, y), df2) +\n    stat_function(fun = dt_two, geom = \"area\", fill = \"green\") +\n    geom_vline(aes(xintercept = 1.645), lwd = 1.5) +\n    geom_text(data=a1, aes(x=x,y=y, label=label),\n              size=14 , fontface=\"bold.italic\" ) +\n    geom_text(data=a2, aes(x=x,y=y, label=label),\n              size=10 , fontface=\"bold.italic\", parse = T) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Power\n\nPower is the probability of rejecting $H_0$ given that $H_1$.\n\n$$\nPower  = 1-\\beta\n$$\n\n## Power\n\nWe want to ensure we have a high power and low type I error rate ($\\alpha$).\n\n::: fragment\nAs practitioners, we control $\\alpha$. Set it before we conduct a study. Usually set at 0.05.\n:::\n\n::: fragment\nWe cannot control power because it is dependent by effect size, $\\alpha$, and sample size.\n:::\n\n## Power Relationships\n\n-   $\\alpha \\uparrow$ $\\rightarrow$ $Power\\ \\uparrow$\n-   $n \\uparrow$ $\\rightarrow$ $Power\\ \\uparrow$\n\n## Power Analysis in R\n\nThe `pwr` package in R will conduct power and sample size for several common statistical tests. For more information, you can check this [vignette](https://cran.r-project.org/web/packages/pwr/vignettes/pwr-vignette.html) and their [github](https://github.com/heliosdrm/pwr).\n\n## Conceptial\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- seq(-4, 4, length.out = 1000)\nxx <- seq(-1, 7, length.out = 1000)\ndt_one<-function(x){\n            y <- dnorm(x)\n            y[x < qnorm(.94)] <-NA\n            return(y)\n}\ndt_two<-function(x){\n            y <- dnorm(x, mean = 3)\n            y[x > 1.645] <-NA\n            return(y)\n}\ndf1 <- tibble(x = x, y = dnorm(x))\ndf2 <- tibble(x = xx, y = dnorm(xx, mean = 3))\n\na1 <- tibble(x = c(0,3), y = c(0.43, 0.43), label = c(\"H0\", \"H1\"))\na2 <- tibble(x = c(2.05,1.25), y = c(0.02, 0.02), label = c(paste(\"alpha\"), \"beta\"))\n\ndf1 |> \n  ggplot(aes(x, y)) +\n    stat_function(fun = dt_one, geom = \"area\", fill = \"red\") +\n    geom_line() +\n    geom_line(aes(x, y), df2) +\n    stat_function(fun = dt_two, geom = \"area\", fill = \"green\") +\n    geom_vline(aes(xintercept = 1.645), lwd = 1.5) +\n    geom_text(data=a1, aes(x=x,y=y, label=label),\n              size=14 , fontface=\"bold.italic\" ) +\n    geom_text(data=a2, aes(x=x,y=y, label=label),\n              size=10 , fontface=\"bold.italic\", parse = T) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Monte Carlo Power Analysis\n\nGiven a Null and Alternative hypothesis, one can determine how often a you will reject the null hypothesis from a high number of simulated data. \n\nThis is done by simulating from a hypothesized alternative distribution, conducting a hypothesis test given that the null hypothesis is true, and determine how often do you reject the null hypothesis.\n\n$$\nPower = \\frac{\\#\\ Rejected}{\\#\\ Simulated\\ Data}\n$$\n\n## Monte Carlo Power Analysis\n\n1. Construct an alternative hypothesized distribution ($\\mu = \\mu_a$)\n2. Simulate from the alternative hypothesized distribution\n3. Compute the test statistic based on null hypothesis distribution\n4. Determine and record if the test statistic is rejected or not\n5. Repeat steps 2-4 $N$ times\n6. Find the proportion rejected from the simulation study\n\n## t-test Example\n\nUse a Monte Carlo Hypothesis Test for $H_0: \\mu = 6$ and $H_a: \\mu \\neq 6$. Simulate fake data from 24 RV's from $N(3, 9)$. Testing how the distribution will look like assuming that the null hypothesis is true.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nx <- rnorm(24, 3, 3)\n```\n:::\n\n\nAnswer:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntstat <- (mean(x) - 6)/(sd(x)/sqrt(24))\n\n\nt_stat_sim <- function(i){\n  x <- rnorm(24, 6, 3)\n  tt <- (mean(x) - 6)/(sd(x)/sqrt(24))\n  return(tt)\n}\nt_dist <- sapply(1:100000, t_stat_sim)\n\nt_dist |> tibble(x = _) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(aes(xintercept = tstat), col = \"red\")\n\nsum(abs(tstat) < abs(t_dist))\n(sum(abs(tstat) < abs(t_dist)) + 1) / (length(t_dist) + 1)\n```\n:::\n\n\n\n## Power Analysis Example\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nalpha <- 0.05\ncv <- qt(1-alpha/2, 23)\n\nt_stat_sim <- function(i, mu){\n  x <- rnorm(24, mu, 3)\n  tt <- (mean(x) - 6)/(sd(x)/sqrt(24))\n  return(cv < abs(tt))\n}\nmus <- 0:12\npowers <- c()\nfor(i in 1:13){\n  t_dist <- sapply(1:100000, t_stat_sim, mu = mus[i])\n  powers <- c(powers, mean(t_dist))\n}\n\ntibble(x = mus, y = powers) |> \n  ggplot(aes(x, y)) +\n  geom_line() +\n  ylab(\"Power\") +\n  xlab(\"Alternative\")\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n\n\n# Resampling Techniques\n\n## Resampling Techniques\n\nResampling techniques involve methods that require to sample from the data, instead of the parametric model. Common Methods:\n\n-   Permutation Tests\n-   Boostrapping\n-   Cross-Validation\n-   Jackknifer\n\n\n\n## Sampling with Replacement\n\nGiven a data set, we sample an observation to a new data set. The sampled observation **can** be resampled again to the new data set.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nx <- 1:20\nsample(x, 10, replace = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] 11 16  3 18  8  1  9 10 16 14\n```\n\n\n:::\n:::\n\n\n\n## Sampling without Replacement\n\nGiven a data set, we sample an observation to a new data set. The sampled observation **cannot** be resampled again to the new data set.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nx <- 1:20\nsample(x, 10, replace = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] 12  8  1  4  6  3 11 13 14 15\n```\n\n\n:::\n:::\n\n\n# Permutation Tests\n\n## Permutation Tests\n\nPermutation tests conducts a statistical test by constructing the null distribution by rearranging the data points in a sample. \n\nNull hypothesis states that the rearrangements of the data points **are** random.\n\nAlternative hypothesis states that the rearrangement of the data points **aren't** random.\n\n## Permutation Distributions\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n### Null \n\n$$\nF_x = F_y\n$$\n\n:::\n\n::: {.column width=\"50%\"}\n### Alternative \n\n$$\nF_x \\neq F_y\n$$\n\n:::\n\n::::\n\n## Permutation Distributions\n\nSuppose $\\{X_i, Y_i\\}^n_{i=1}$ is an observed permutation, $X = \\{X_1, \\ldots, X_n\\}$, $Y = \\{Y_1, \\ldots, Y_n\\}$.\n\nThe Probability of any permuation is $1/n!$.\n\nTherefore, for a statistic $T(X,Y)$, a sampling distribution can be constructed by all the different permutations.\n\nA hypothesis test can be conducted by observing the proportion of more extreme values of the sample statistic.\n\n## Approximate Permutation Distribution\n\nConstructing the distribution for the permutations can be challenging if the number of permutations is high! If $n=100$, the number of permutations is $100!$:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfactorial(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 9.332622e+157\n```\n\n\n:::\n:::\n\n\nTherefore, simulation techniques are needed to approximate the p-value. \n\nBy randomly drawing from the sample, we can approximate the p-value.\n\n\n## Algorithm\n\n1.    Construct a new data set\n  1.    Fix the predictor ($X$) variable and randomly assign a data point $Y$ to the fixed $X$\n2.    Compute a test statistic using the new data set and store the value\n3.    Repeat steps 1 and 2 for $N$ times\n4.    Compute the test statistic from the empirical sample (un-permutated)\n5.    Count how many permutated statistics that are more extreme than the sample test statistic ($m$)\n6.    Compute the Monte Carlo p-value\n\n$$\np = \\frac{m +1}{N + 1}\n$$\n\n## Example: Emperical Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> ggplot(aes(x=species, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter() +\n  labs(x = \"Species\", y = \"Body Mass\")\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Example: Random Shuffling \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> ggplot() +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(aes(species, shuffle(body_mass_g)))\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Example: Random/Emperical \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(col = \"red\") +\n  geom_jitter(aes(species, shuffle(body_mass_g)))\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n## Example: Random/Emperical \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(col = \"red\") \n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## ANOVA\n\nWe want to determine if body mass of penguins are different for different species.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> aov(body_mass_g ~ species, data = _) |> anova()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Analysis of Variance Table\n#> \n#> Response: body_mass_g\n#>            Df    Sum Sq  Mean Sq F value    Pr(>F)    \n#> species     2 145190219 72595110  341.89 < 2.2e-16 ***\n#> Residuals 330  70069447   212332                      \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n## Permutation Test\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nf_stat <- penguins |> \n  aov(body_mass_g ~ species, data = _) |> \n  anova() |> \n  _$`F value`[1]\n  \n\nf_sim <- function(i){\n  ff <- penguins |> \n    aov(shuffle(body_mass_g) ~ species, data = _) |> \n    anova() |> \n    _$`F value`[1]\n  return(ff)\n}\n\nf_dist <- replicate(10000, f_sim(1))\n\ntibble(x= f_dist) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(xintercept = f_stat)\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nsum(f_stat < f_dist) + 1 / (length(f_dist) + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 9.999e-05\n```\n\n\n:::\n:::\n\n\n\n## Permutation Example\n\nIs there a linear relationship between `flavor` and `aroma` in coffee drinks from the `coffee_aroma` data set.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncoffee_aroma |> ggplot(aes(x=aroma, y = flavor)) +\n  geom_point() + theme_bw() +\n  geom_smooth(method = \"lm\", se = F)\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n## Permutation Linear Regression\n\n-   Keep the predictor values fixed (unchanged)\n-   Randomly assign the sampled outcome values to a fixed predictor\n-   Compute the regression coefficients for the predictor variable\n\n## Simulated Permutation\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncoffee_aroma |> ggplot(aes(x=aroma, y = shuffle(flavor))) +\n  geom_point() + theme_bw() +\n  geom_smooth(method = \"lm\", se = F)\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n## Permutations\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncoffee_aroma |> ggplot() +\n  geom_smooth(mapping = aes(aroma, flavor), method = \"lm\", se = F, col = \"red\") +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) +\n  geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = \"lm\", se = F) \n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n## Permutation Test\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nf_stat <- coffee_aroma |> \n  lm(flavor ~ aroma, data = _) |> \n  _$`coefficients`[2]\n\n\n\nf_sim <- function(i){\n  ff <- coffee_aroma |> \n  lm(shuffle(flavor) ~ aroma, data = _) |> \n  _$`coefficients`[2]\n  return(ff)\n}\n\nf_dist <- replicate(10000, f_sim(1))\n\ntibble(x= f_dist) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(xintercept = f_stat)\n```\n\n::: {.cell-output-display}\n![](6_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nsum(f_stat < f_dist) + 1 / (length(f_dist) + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 9.999e-05\n```\n\n\n:::\n:::\n",
    "supporting": [
      "6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}