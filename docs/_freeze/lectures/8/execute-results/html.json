{
  "hash": "1c2eef9cd729a456c4f4fdcd1454d92f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simulation Studies\"\nsubtitle: \"Linear and Generalized Linear Models\"\nformat:\n  revealjs:\n    include-in-header: \"math_commands.html\"\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nengine: knitr\nknitr:\n  opts_chunk: \n    code-fold: true\n    echo: true\n    eval: true\n    comment: \"#>\" \nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - code-fullscreen\n  - webr\nwebr: \n  show-startup-message: true\n  packages: ['ggplot2', 'dplyr', 'stringr']\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## R Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(Hmisc)\nlibrary(rms)\nlibrary(gam)\ntheme_set(theme_bw())\n```\n:::\n\n\n\n\n# Simulation Studies\n\n# Linear Models\n\n# Generalized Linear Models\n\n## Exponential Family of Distributions\n\nAn exponential family of distributions are random variables that allow their probability density function to have the following form:\n\n$$\nf(y; \\theta,\\phi) = a(y,\\phi)\\exp\\left\\{\\frac{y\\theta-\\kappa(\\theta)}{\\phi}\\right\\}\n$$\n\n-   $\\theta$: is the canonical parameter (also a function of other parameters)\n\n-   $\\kappa(\\theta)$: is a known cumulant function\n\n-   $\\phi>0$: dispersion parameter function\n\n-   $a(y,\\phi)$: normalizing constant\n\n## Canonical Parameter\n\nThe canonical parameter represents the relationship between the random variable and the $E(Y)=\\mu$\n\n## Normal Distribution\n\n$$\nf(y;\\mu,\\sigma^2)=\\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-\\frac{(y-\\mu)^2}{2\\sigma^2}}\n$$\n\n## Binomial Distribution\n\n$$\nf(y;n,p)=\\big(^n_y\\big) p^y(1-p)^{n-y}\n$$\n\n## Poisson Distribution\n\n$$\nf(y;\\lambda) = \\frac{e^{-\\lambda}\\lambda^y}{y!} \n$$\n\n## Negative Binomial Distribution\n\n$$\nf(y;\\mu, \\theta) = \\left(\\begin{array}{c}\n y+\\theta+1\\\\\n y\n\\end{array}\\right)\n\\left(\\frac{\\mu}{\\mu+\\theta}\\right)^y\n\\left(\\frac{\\theta}{\\mu+\\theta}\\right)^\\theta\n$$\n\n-   $\\mu$: average count\n-   $\\theta$: dispersion of data\n-   $E(Y)=\\mu$\n-   $Var(Y) = \\mu + \\mu^2/\\theta$\n\n## Gamma Distribution\n\n\n\n## Common Distributions and Canonical Parameters\n\n| Random Variable   | Canonical Parameter                  |\n|-------------------|--------------------------------------|\n| Normal            | $\\mu$                                |\n| Binomial          | $\\log\\left(\\frac{\\mu}{1-\\mu}\\right)$ |\n| Negative Binomial | $\\log\\left(\\frac{\\mu}{\\mu+k}\\right)$ |\n| Poisson           | $\\log(\\mu)$                          |\n| Gamma             | $-\\frac{1}{\\mu}$                     |\n| Inverse Gaussian  | $-\\frac{1}{2\\mu^2}$                  |\n\n## Generalized Linear Models\n\nA generalized linear model (GLM) is used to model the association between an outcome variable (of any data type) and a set of predictor values. We estimate a set of regression coefficients $\\boldsymbol \\beta$ to explain how each predictor is related to the expected value of the outcome.\n\n## Generalized Linear Models\n\nA GLM is composed of a systematic and random component.\n\n## Random Component\n\nThe random component is the random variable that defines the randomness and variation of the outcome variable.\n\n## Systematic Component\n\nThe systematic component is the linear model that models the association between a set of predictors and the expected value of Y:\n\n$$\ng(\\mu)=\\eta=\\boldsymbol X_i^\\mathrm T \\boldsymbol \\beta\n$$\n\n-   $\\boldsymbol\\beta$: regression coefficients\n\n-   $\\boldsymbol X_i=(1, X_{i1}, \\ldots, X_{ip})^\\mathrm T$: design vector\n\n-   $\\eta$: linear model\n\n-   $\\mu=E(Y)$\n\n-   $g(\\cdot)$: link function\n\n## Simulating Bernoulli\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\neta <- boot::inv.logit(-0.85 + 1.3 * x)\ny <- rbinom(1000, size = 1, prob = eta)\n```\n:::\n\n\n\n\n\n## Simulating Poisson RV\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\neta <- exp(-0.85 + 1.3 * x)\ny <- rpois(1000, lambda = eta)\n```\n:::\n\n\n\n\n## Simulating Negative Binomial RV\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\neta <- exp(-0.85 + 1.3 * x)\ny <- rnbinom(1000, mu = eta, size = 0.5)\n```\n:::\n\n\n\n\n## Simulating a Gamma RV\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny_true <- exp(0.75 + 1.3 * x)\ny <- rgamma(1000, rate = 10 / y_true, shape = 10)\n```\n:::\n\n\n\n\n## Bayesian Regression Model in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(brms)\nbrm(formula, # <1>\n    data, # <2>\n    family) # <3>\n```\n:::\n\n\n\n1.  Supply a formula for R\n2.  Supply the data frame\n3.  Which family and link function is used to model data\n\n## Logistic (Binomial) Regression\n\nLogistic Regression is used when your outcome is binary:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbrm(y~x, \n    data, \n    family = bernoulli())\n```\n:::\n\n\n\n## Poisson Regression\n\nPoisson Regression is used when the outcome is count data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbrm(y~x, \n    data, \n    family = poisson())\n```\n:::\n\n\n\n## Gamma Regression\n\nGamma Regression is used when modeling the association between predictors and positive continuous values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbrm(y~x, \n    data, \n    family = Gamma())\n```\n:::\n\n\n\n## Negative Binomial Regression\n\nNegative Binomial Regression is used four with overdispersed count data, where the variance is larger than expected.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbrm(y~x, \n    data,\n    family = negbinomial())\n```\n:::\n\n\n\n\n# Nonparameteric Models\n\n## Nonparameteric Models\n\n## Nonlinear Models\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000, 2)\ny <- 3 + sinpi(x/2) + rnorm(1000, sd = 0.3)\ndf <- tibble(x, y)\nxlm <- df |> lm(y ~ rcs(x, parms = 10), data = _)\ndf |> ggplot(aes(x, y)) +\n  geom_point() +\n  geom_line(aes(x, predict(xlm)), col = \"red\") \n```\n:::\n\n\n\n\n## Nonlinear Models\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000, -4)\ny <- 3 +  cospi(x/2) + rnorm(1000, sd = 0.3)\ndf <- tibble(x, y)\nxlm <- df |> lm(y ~ rcs(x, parms = 10), data = _)\ndf |> ggplot(aes(x, y)) +\n  geom_point() +\n  geom_line(aes(x, predict(xlm)), col = \"red\") \n```\n:::\n\n\n\n## Generalized Additive Models\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx1 <- rnorm(1000, 2)\nx2 <- rnorm(1000, -4)\ny <- sinpi(x1/2) + cospi(x2/2) + rnorm(1000, sd = 0.5)\ndf <- tibble(x1, x2, y)\n\nxgam <- gam(y ~ rcs(x1,10) + rcs(x2, 10))\nxgam$coefficients\n\ndf1 <- tibble(x = x1,\n              y = sinpi(x1/2),\n              pred = rcs(x1,10) %*% xgam$coefficients[2:10]) \ndf2 <- tibble(x = x2,\n              y = cospi(x2/2),\n              pred = rcs(x2,10) %*% xgam$coefficients[11:19]) \ndf1 |> ggplot(aes(x, y)) +\n  geom_point() +\n  geom_line(aes(x, pred), col = \"red\") \n\ndf2 |> ggplot(aes(x, y)) +\n  geom_point() +\n  geom_line(aes(x, pred), col = \"red\") \n\nplot(xgam)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}