{
  "hash": "5ebbdcd6559f81d00f7331b0ac5a2c6a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Monte Carlo Methods\"\nsubtitle: \"Random Variable Generation\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nengine: knitr\nknitr:\n  opts_chunk: \n    code-fold: true\n    echo: true\n    eval: true\n    comment: \"#>\" \nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - code-fullscreen\n  - webr\nwebr: \n  show-startup-message: true\n  packages: ['ggplot2', 'dplyr', 'stringr']\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Random Variables\n\n## Random Process\n\nA random process is act of observing an outcome of an event that is unpredictable.\n\n::: fragment\nExamples:\n\n-   Flipping a coin\n\n-   Rolling a die\n\n:::\n\n\n## Random Variable\n\nA random variable connects the outcomes observed from a random process to a probability space.\n\n## Flipping a Coin\n| | | |\n|:-|:-|:-|\n|Outcome | Head | Tails |\n|Probability | 0.5 | 0.5 |\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(patchwork)\nx <- sample(c(\"H\", \"T\"), 5000, replace = T)\nx |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nylab(\"Probability\") +\ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-1-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n## Rolling a Die\n\n| | | | | | | |\n|:-|:-|:-|:-|:-|:-|:-|\n|Outcome | 1 | 2 | 3 | 4 | 5 | 6 |\n|Probability | 1/6 | 1/6 | 1/6 | 1/6 | 1/6 | 1/6 |\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# library(tidyverse)\nx <- sample(1:6, 50000, replace = T)\nx |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nylab(\"Probability\") +\ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Discrete Random Variables\n\nA random variable is considered to be discrete if the outcome are only whole numbers (integers).\n\n## PMF\n\nThe probability mass function of discrete variable can be represented by a formula, table, or a graph. The Probability of a random variable Y can be expressed as $P(Y=y)$ for all values of $y$.\n\n## Rolling a Die\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- sample(1:6, 50000, replace = T)\nx |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nylab(\"Probability\") +\ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## CDF\n\nThe cumulative distribution function provides the $P(Y\\leq y)$ for a random variable $Y$.\n\n## Expected Value\n\nThe *expected value* is the value we expect when we randomly sample from population that follows a specific distribution. The expected value of Y is\n\n$$\nE(Y)=\\sum_y yP(y)\n$$\n\n## Variance\n\nThe *variance* is the expected squared difference between the random variable and expected value.\n\n$$\nVar(Y)=\\sum_y\\{y-E(Y)\\}^2P(y)\n$$\n\n$$\nVar(Y) = E(X^2) - E(X)^2\n$$\n\n## Known Distributions\n\n| Distribution      | Parameter(s)      | PMF $P(Y=y)$                          |\n|------------------|------------------|------------------------------------|\n| Bernoulli         | $p$               | $p$                                   |\n| Binomial          | $n$ and $p$       | $(^n_y)p^y(1-p)^{n-p}$                |\n| Geometric         | $p$               | $(1-p)^{y-1}p$                        |\n| Negative Binomial | $r$ and $p$       | $(^{y-1}_{r-1})p^{r-1}(1-p)^{y-r}$    |\n| Hypergeometric    | $N$, $n$, and $r$ | $\\frac{(^r_y)(^{N-r}_{n-y})}{(^N_n)}$ |\n| Poisson           | $\\lambda$         | $\\frac{\\lambda^y}{y!} e^{-\\lambda}$   |\n\n\n## Binomial Distribution\n\nAn experiment is said to follow a binomial distribution if\n\n1.  Fixed $n$\n2.  Each trial has 2 outcomes\n3.  The probability of success is a constant $p$\n4.  The trials are independent of each\n\n::: fragment\n$P(X=x)=(^n_x)p^x(1-p)^{n-x}$\n:::\n\n::: fragment\n$X$ can be any value between 0 to n\n:::\n\n::: fragment\n$X \\sim Bin(n,p)$\n:::\n\n## Bernoulli Distribution (n = 1, p = 0.1; Biased Coin Flip)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 0.1\nx <- rbinom(50000, 1, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:1 |> pbinom(1, p) |> tibble(x = 0:1, y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## Distribution (n = 30, p = 0.1)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 0.1\nx <- rbinom(50000, 30, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nxlim(c(0,30)) +\nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:30 |> pbinom(30, p) |> tibble(x = 0:30, y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Distribution (n = 30, p = 0.5)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 0.5\nx <- rbinom(50000, 30, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nxlim(c(0,30)) +\nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:30 |> pbinom(30, p) |> tibble(x = 0:30, y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Distribution (n = 30, p = 0.85)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 0.85\nx <- rbinom(50000, 30, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nxlim(c(0,30)) +\nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:30 |> pbinom(30, p) |> tibble(x = 0:30, y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## Expectations\n\n$$\nE(X) =  np\n$$\n\n$$\nVar(X) = np(1-p)\n$$\n\n## Poisson Distribution\n\nThe poisson distribution describes an experiment that measures that occurrence of an event at specific point and/or time period.\n\n::: fragment\n$P(X=x)=\\frac{\\lambda^x}{x!}e^{-\\lambda}$\n:::\n\n::: fragment\n$X$ can take any value from 0 to $\\infty$\n:::\n\n::: fragment\n$X \\sim Pois(\\lambda)$\n:::\n\n\n## Distribution ($\\lambda$ = 3.5)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 3.5\nx <- rpois(50000, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:max(x) |> ppois(p) |> tibble(x = 0:max(x), y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Distribution ($\\lambda$ = 34.5)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 34.5\nx <- rpois(50000, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) + \nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:max(x) |> ppois(p) |> tibble(x = 0:max(x), y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## Expectations\n\n$$\nE(X) = \\lambda\n$$\n\n$$\nVar(X) = \\lambda\n$$\n\n## Negative Binomial\n\nThe negative binomial distribution is a discrete probability distribution that models the number of failures required to achieve a specified number of successes in a sequence of independent and identically distributed Bernoulli trials. \n\n$$\nP(X = k) = \\binom{k + r - 1}{r - 1} p^r (1 - p)^k\n$$\n\n::: fragment\n$X$ can take the values from 0 to $\\infty$\n:::\n\n::: fragment\n$X\\sim NB(p, r)$\n:::\n\n## Expectations\n\n$$\nE(X) = \\frac{r (1 - p)}{p}\n$$\n\n$$\n\\text{Var}(X) = \\frac{r (1 - p)}{p^2}\n$$\n\n## Distribution (r = 11, p = 0.1)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 0.1\nx <- rnbinom(50000,11, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) +\nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:max(x) |> pnbinom(11, p) |> tibble(x = 0:max(x), y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Distribution (r = 11, p = 0.45)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 0.45\nx <- rnbinom(50000, 11, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) +\nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:max(x) |> pnbinom(11, p) |> tibble(x = 0:max(x), y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Distribution (r = 11, p = 0.63)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np <- 0.63\nx <- rnbinom(50000, 11, p)\np1 <- x |> tibble() |> \nggplot(aes(x)) +\ngeom_bar(aes(y = (..count..)/sum(..count..))) +\nylab(\"Probability\") +\nggtitle(\"PMF\") +\ntheme_bw()\np2 <- 0:max(x) |> pnbinom(11, p) |> tibble(x = 0:max(x), y = _) |> \nggplot(aes(x,y)) +\ngeom_step() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Continuous Random Variables\n\nA random variable $X$ is considered continuous if the $P(X=x)$ does not exist.\n\n## CDF\n\nThe cumulative distribution function of $X$ provides the $P(X\\leq x)$, denoted by $F(x)$, for the domain of $X$.\n\nProperties of the CDF of $X$:\n\n1.  $F(-\\infty)\\equiv \\lim_{y\\rightarrow -\\infty}F(y)=0$\n2.  $F(\\infty)\\equiv \\lim_{y\\rightarrow \\infty}F(y)=1$\n3.  $F(x)$ is a nondecreaseing function\n\n## PDF\n\nThe probability density function of the random variable $X$ is given by\n\n$$\nf(x)=\\frac{dF(x)}{d(x)}=F^\\prime(x)\n$$\n\nwherever the derivative exists.\n\nProperties of pdfs:\n\n1.  $f(x)\\geq 0$\n2.  $\\int^\\infty_{-\\infty}f(x)dx=1$\n3.  $P(a\\leq X\\leq b) = P(a<X<b)=\\int^b_af(x)dx$\n\n## Expected Value\n\nThe expected value for a continuous distribution is defined as\n\n$$\nE(X)=\\int x f(x)dx\n$$\n\nThe expectation of a function $g(X)$ is defined as\n\n$$\nE\\{g(X)\\}=\\int g(x)f(x)dx\n$$\n\n## Variance\n\nThe variance of continuous variable is defined as\n\n$$\nVar(X) =  E[\\{X-E(X)\\}^2] = \\int \\{X-E(X)\\}^2 f(x)dx \n$$\n\n\n\n## Uniform Distribution\n\nA random variable is said to follow uniform distribution if the density function is constant between two parameters.\n\n::: fragment\n$$\nf(x) = \\left\\{\\begin{array}{cc}\n \\frac{1}{b-a} & a \\leq x \\leq b\\\\\n0 & \\mathrm{elsewhere}\n\\end{array}\\right.\n$$\n:::\n\n::: fragment\n$X$ can take any value between $a$ and $b$\n:::\n\n::: fragment\n$X \\sim U(a,b)$\n:::\n\n\n\n## Distribution (a = 4, b = 25)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\na <- 4\nb <- 25\nx <- seq(a, b, length.out = 1000)\np1 <- dunif(x, a, b) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- punif(x, a, b) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n\n## Distribution (a = 0, b = 1)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\na <- 0\nb <- 1\nx <- seq(a, b, length.out = 1000)\np1 <- dunif(x, a, b) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- punif(x, a, b) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## Expectations\n\n$$\nE(X) = \\frac{a+b}{2}\n$$\n\n$$\nVar(X) = \\frac{1}{12}(b-a)^2\n$$\n\n\n\n## Normal Distribution\n\nA random variable is said to follow a normal distribution if the the frequency of occurrence follow a Gaussian function.\n\n$$\nf(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left\\{-\\frac{(x-\\mu)^2}{2\\sigma^2}\\right\\}\n$$\n\n::: fragment\n$X$ can take any value between $-\\infty$ and $\\infty$\n:::\n\n::: fragment\n$X\\sim N(\\mu, \\sigma^2)$\n:::\n\n## Distribution ($\\mu$ = 34, $\\sigma^2$ = 5)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\na <- 25\nb <- 45\nx <- seq(a, b, length.out = 1000)\np1 <- dnorm(x, 34, sqrt(5)) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- pnorm(x, 34, sqrt(5)) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Distribution ($\\mu$ = -8, $\\sigma^2$ = 10)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\na <- -20\nb <- 4\nx <- seq(a, b, length.out = 1000)\np1 <- dnorm(x, -8, sqrt(10)) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- pnorm(x, -8, sqrt(10)) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Expectations \n\n$$\nE(X) = \\mu\n$$\n\n$$\nVar(X) = \\sigma^2\n$$\n\n## Gamma Distribution\n\nA gamma random variable is characterized by the gamma distribution, used to model waiting times or the time until an event occurs a certain number of times.\n\n$$\nf(x; \\alpha, \\beta) = \\frac{x^{\\alpha - 1} e^{-x/\\beta}}{\\beta^\\alpha \\Gamma(\\alpha)}\n$$\n\n$$\n\\Gamma(\\alpha) = \\int_0^\\infty t^{\\alpha - 1} e^{-t} \\, dt\n$$\n\n::: fragment\n$X$ can take any value between 0 and $\\infty$\n:::\n\n::: fragment\n$X\\sim Gamma(\\alpha,\\beta)$\n:::\n\n## Expectations\n\n$$\nE(X) = \\alpha \\beta\n$$\n\n$$\n\\text{Var}(X) = \\alpha \\beta^2\n$$\n\n## Distribution ($\\alpha$ = 1.5, $\\beta$ = 2.6)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ny <- rgamma(1000, 1.5, 2.6)\na <- 0\nb <- 10\nx <- seq(a, b, length.out = 1000)\np1 <- dgamma(x, 1.5, 2.6) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- pgamma(x, 1.5, 2.6) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n## Distribution ($\\alpha$ = 3.5, $\\beta$ = 1.6)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ny <- rgamma(1000, 3.5, 1.6)\na <- 0\nb <- 10\nx <- seq(a, b, length.out = 1000)\np1 <- dgamma(x, 3.5, 1.6) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- pgamma(x, 3.5, 1.6) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n## Distribution ($\\alpha$ = 5.2, $\\beta$ = 1.6)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ny <- rgamma(1000, 5.2, 1.6)\na <- 0\nb <- 10\nx <- seq(a, b, length.out = 1000)\np1 <- dgamma(x, 5.2, 1.6) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- pgamma(x, 5.2, 1.6) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n## Beta Distribution\n\nThe beta distribution is often used to model random variables that represent proportions or probabilities.\n\n$$\nf(x; \\alpha, \\beta) = \\frac{x^{\\alpha - 1} (1 - x)^{\\beta - 1}}{B(\\alpha, \\beta)}\n$$\n\n$$\nB(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1} (1 - t)^{\\beta - 1} \\, dt\n$$\n\n::: fragment\n$X$ can take a value between 0 and 1\n:::\n\n::: fragment\n$X\\sim Beta(\\alpha,\\beta)$\n:::\n\n## Expectations\n\n$$\nE(X) = \\frac{\\alpha}{\\alpha + \\beta}\n$$\n\n$$\n\\text{Var}(X) = \\frac{\\alpha \\beta}{(\\alpha + \\beta)^2 (\\alpha + \\beta + 1)}\n$$\n\n## Distribution ($\\alpha$ = 5.2, $\\beta$ = 1.6)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ny <- rbeta(1000, 5.2, 1.6)\na <- 0\nb <- 1\nx <- seq(a, b, length.out = 1000)\np1 <- dbeta(x, 5.2, 1.6) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- pbeta(x, 5.2, 1.6) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n## Distribution ($\\alpha$ = 1.3, $\\beta$ = 1.6)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ny <- rbeta(1000, 1.3, 1.6)\na <- 0\nb <- 1\nx <- seq(a, b, length.out = 1000)\np1 <- dbeta(x, 1.3, 1.6) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- pbeta(x, 1.3, 1.6) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n## Distribution ($\\alpha$ = .72, $\\beta$ = .76)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\na <- .72\nb <- .76\nx <- seq(0, 1, length.out = 1000)\np1 <- dbeta(x, a, b) |> tibble(x = x, y = _) |> \nggplot(aes(x, y)) +\ngeom_line() +\nylab(\"Density\") +\nggtitle(\"PDF\") +\ntheme_bw()\np2 <- pbeta(x, a, b) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\np1 + p2\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n\n## Distributions in R\n\nSeveral common distributions can be utilized in R with the 4 common functions:\n\n| Letter | Functionality                                                 |\n|:-------|:--------------------------------------------------------------|\n| `d`    | returns the height of the probability density/mass function   |\n| `p`    | returns the cumulative density function value                 |\n| `q`    | returns the inverse cumulative density function (percentiles) |\n| `r`    | returns a randomly generated number                           |\n\n\n# Random Number Generator\n\n\n## Generating Random Numbers\n\nA number is an outcome from a random experiment.\n\n::: fragment\nRandom experiment is an experiment where the outcome is not predicted.\n:::\n\n::: fragment\nThe outcomes have a probability of being observed, whether equal or not.\n:::\n\n## Generating Random Numbers\n\n![](https://content.presentermedia.com/files/clipart/00002000/2605/pair_of_white_dice_rolled_800_wht.jpg)\n\n## Generating Random Numbers\n\n![](https://www.pbs.org/newshour/app/uploads/2015/03/159615168-1024x768.jpg)\n\n## Generating Random Numbers\n\n![](https://cdn.mos.cms.futurecdn.net/gGpxdnJ7x3dBMrgSgKybQU-1200-80.jpg)\n\n## Generating Random Numbers\n\n![](https://mathbitsnotebook.com/Algebra2/Statistics/random%20table.png)\n\n## Psuedo Random Numbers\n\nThese methods are considered time-consuming when a large number values are necessary.\n\n::: fragment\nWith the advent of computers, random number can be generated with the use deterministic algorithms, where a mechanism is used to make it random, such as time.\n:::\n\n::: fragment\nComputer-generated random numbers are considered psuedo random numbers because an algorithm is used to generate them given an initial single value, known as a seed.\n:::\n\n::: fragment\nSupplying a seed to a random number generator will ensure that the same numbers are produced every time.\n:::\n\n## Mersenne Twister\n\nThe Mersenne Twister is a widely used pseudorandom number generator (PRNG) known for its high quality and efficiency. It was developed by Makoto Matsumoto and Takuji Nishimura in 1997. \n\nThe default random number generator in R.\n\n\n## Uniform Distribution R\n\n::: {.panel-tabset}\n\n## Description\n\nThe `runif` function in R will generate a value the come from a uniform distribution.\n\n`runif` arguments:\n\n-   `n`: number of values to generate\n-   `min`: the smallest possible value to generate\n-   `max`: the largest possible value to generate\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrunif(1, 0, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.4641163\n```\n\n\n:::\n:::\n\n\n:::\n\n\n# Random Variable Generations\n\n## Random Variable Generation\n\nSeveral distribution, common and uncommon, can be generated using a uniform random variables.\n\n::: fragment\nMore complex distributions may require the use of common distributions.\n:::\n\n## Inverse-Transform Method\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\na <- -20\nb <- 4\nx <- seq(a, b, length.out = 1000)\npnorm(x, -8, sqrt(10)) |> tibble(x = x, y = _) |> \nggplot(aes(x,y)) +\ngeom_line() +\ntheme_bw() +\nggtitle(\"CDF\") +\nylab(paste0(\"P(X\",\"\\u2264\",\" x)\"))\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n## Inverse-Transformation Algorithm \n\n1.    Generate a random value $U$ that follows a $U(0,1)$\n2.    Using the CDF ($F(X)$) for random variable $X$, compute:\n\n$$\nX = F^{-1}(U)\n$$\n\n\n## Exponential Distribution\n\nAn exponential random variable is characterized by the exponential distribution, used to model waiting times or the time until an event occurs a certain number of times.\n\nThe exponential distribution is a gamma random variable with $\\alpha = 1$.\n\n## Exponential Distribution\n\n$$\nf(x) = \\frac{1}{\\lambda} \\exp\\left\\{-\\frac{x}{\\lambda}\\right\\}\n$$\n\n$$\nF(x) = 1-\\exp\\left\\{-\\frac{x}{\\lambda}\\right\\}\n$$\n\n$$\nF^{-1}(x) = -\\lambda \\log(1-x)\n$$\n\n## Simulating an Exponential RV\n\n$$\nX \\sim Exp(2)\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxe <- seq(0, 4, length.out = 1000)\nu <- runif(100000)\nu |> tibble(x = _) |> \nggplot(aes(x=u, y = ..density..)) +\ngeom_histogram() +\ngeom_line(data = tibble(x = xe, y = dexp(xe, rate = 1/2)),\n          mapping = aes(x,y)) +\ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-25-1.png){width=960}\n:::\n:::\n\n\n## Simulating an Exponential RV\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nu <- runif(100000)\nx <- -2 * log(1-u)\n```\n:::\n\n\n## Simulating an Exponential RV\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx |> tibble(x = _) |> \nggplot(aes(x=x, y = ..density..)) +\ngeom_histogram() +\ngeom_line(data = tibble(x = xe, y = dexp(xe, rate = 1/2)),\n          mapping = aes(x,y)) +\ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\n\n## Exponential RV in R\n\n::: {.panel-tabset}\n## Description\n\nThe exponential distribution can be simulated in R using the `rexp` function with the following arguments:\n\n-   `n`: number of values to generate\n-   `rate`: how fast would events occur\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrexp(1, rate = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.2819719\n```\n\n\n:::\n:::\n\n\n:::\n\n## Discrete RV Inverse-Transformations\n\n1.    Generate a random value $U$ that follows a $U(0,1)$\n2.    Using the CDF ($F(X)$), find the smallest integer value $k$ such that:\n\n$$\nU \\leq F(k)\n$$\n3.    $X \\leftarrow k$\n\n## Poisson Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxe <- 0:20\nu <- runif(100000)\nu |> tibble(x = _) |> \nggplot(aes(x=x, y = ..density..)) +\ngeom_histogram(bins = 20) +\ngeom_step(data = tibble(x = xe, y = dpois(xe, lambda = 6)),\n          mapping = aes(x,y)) +\ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n\n## Poisson Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nfinder <- function(u){\n  x <- 0\n  condition <- TRUE\n  while (condition) {\n    uu <- ppois(x, lambda = 6)\n    condition <- uu <= u\n    if(condition){\n      x <- x + 1\n    }\n  }\n  return(x)\n}\nxx <- sapply(u, finder)  \nxx |> tibble(x = _) |> \nggplot(aes(x=x, y = ..density..)) +\ngeom_histogram(bins = 21) +\ngeom_step(data = tibble(x = xe, y = dpois(xe, lambda = 6)),\n          mapping = aes(x,y)) +\ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n## Exponential RV in R\n\n::: {.panel-tabset}\n## Description\n\nThe Poisson distribution can be simulated in R using the `rpois` function with the following arguments:\n\n-   `n`: number of values to generate\n-   `lambda`: the average expected event\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrpois(1, lambda = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0\n```\n\n\n:::\n:::\n\n\n:::\n\n## Normal Distribution\n\nObtaining the inverse distribution function of a normal distribution requires the use of numeric algorithms.\n\n::: fragment\nTherefore it is computationally inefficient to use the inverse-transformation algorithm to generate normal random variables.\n:::\n\n::: fragment\nThe Box-Muller algorithm was developed to generate 2 standard normal ($N(0,1)$) random variables from uniform random variables.\n:::\n\n## Normal Distribution\n\n$$\ny = \\int^x_{-\\infty} \n\\frac{1}{\\sqrt{2\\pi}} \\exp\\left\\{-\\frac{z^2}{2}\\right\\}dz\n$$\n\n## Box-Muller Algorithm\n\n1. Generate 2 independent random variables from $U(0,1)$, $U_1$ and $U_2$\n2. $X_1 = (-2 \\log(U_1))^{1/2}\\cos(2\\pi U_2)$\n3. $X_2 = (-2 \\log(U_1))^{1/2}\\sin(2\\pi U_2)$\n\nBoth $X_1$ and $X_2$ are independent $N(0,1)$\n\n## Normal Distribution R\n\n::: {.panel-tabset}\n\n## Description\n\nThe normal distribution can be simulated in R using the `rnorm` function with the following arguments:\n\n-   `n`: number of values to generate\n-   `mean`: the central tendency (peak)\n-   `sd`: the variation of the data (width)\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnorm(1, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] -0.4939713\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Accept-Reject Algorithm\n\nThe Accept-Reject algorithm allows you to generate noncommon random variable by simulating from a common random variable.\n\n## Algorithm Set Up\n\nLet $X$ be the random variable, that is difficult to generate, you want to generate with a pdf $f(x)$. \n\nLet $Y$ be an easily generated random variable with a pdf $g(y)$. That follows the same support as $f(x)$ \n\nLastly, multiply $g(y)$ with a constant $c$ such that $f(y)\\leq cg(y)$.\n\n## Algorithm\n\n1. Generate $Y$ with a pdf of $g(y)$\n2. Generate $U$ from $U(0, cg(y))$\n3. Accept-Reject\n  1. Accept: $U\\leq f(y)$; $Y \\rightarrow X$\n  2. Reject: $U>f(y)$; repeat the algorithm\n\n## Modified Algorithm\n\n1. Generate $Y$ with a pdf of $g(y)$\n2. Generate $U$ from $U(0,1)$\n3. Accept-Reject\n  1. Accept: $U\\leq f(y)/(cg(y))$; $Y \\rightarrow X$\n  2. Reject: $U>f(y)/(cg(y))$; repeat the algorithm\n\n\n\n## Gamma Random Variable\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxe <- seq(0, 20, length.out = 1000)\nxe |> tibble(x = _) |> \nggplot(aes(x=x, y = dgamma(x, shape = 2.3, scale = 1.2))) + \ngeom_line() +\nylab(\"Density\") +\ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n\n## Gamma RV\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxe <- seq(0, 20, length.out = 1000)\nx <- rexp(100000)\nx |> tibble(x = _) |> \nggplot(aes(x=x, y = ..density..)) + \ngeom_histogram(aes(color = \"Exponential\")) +\ngeom_line(data = tibble(x = xe, \n                        y = dgamma(x, shape = 2.3, scale = 1.2)), \n          aes(x,y, color = \"Gamma\")) +\nylab(\"Density\") +\ntheme_bw() +\ntheme(legend.position = \"bottom\",\n      legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n\n## Gamma RV\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxe <- seq(0, 20, length.out = 1000)\nxe |> tibble(x = _) |> \nggplot(aes(x=x, y = dgamma(x, shape = 2.3, scale = 1.2))) + \ngeom_line(aes(color = \"Gamma\")) +\ngeom_line(data = tibble(x = xe, y = dexp(xe, 1/3)), aes(x,y, color = \"Exponential\")) +\nylab(\"Density\") +\ntheme_bw() +\ntheme(legend.position = \"bottom\",\n      legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-35-1.png){width=960}\n:::\n:::\n\n\n## Accept-Reject Gamma RV\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxe <- seq(0, 20, length.out = 1000)\nxe |> tibble(x = _) |> \nggplot(aes(x=x, y = dgamma(x, shape = 2.3, scale = 1.2))) + \ngeom_line(aes(color = \"Gamma\")) +\ngeom_line(data = tibble(x = xe, y = 1.5*dexp(xe, 1/3)), aes(x,y, color = \"Exponential\")) +\nylab(\"Density\") +\ntheme_bw() +\ntheme(legend.position = \"bottom\",\n      legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-36-1.png){width=960}\n:::\n:::\n\n\n## Accept-Reject Gamma RV\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nxe <- seq(0, 20, length.out = 1000)\nxe |> tibble(x = _) |> \nggplot(aes(x=x, y = dgamma(x, shape = 2.3, scale = 1.2))) + \ngeom_line(aes(color = \"Gamma\")) +\ngeom_line(data = tibble(x = xe, y = 3*dexp(xe, 1/3)), aes(x,y, color = \"Exponential\")) +\nylab(\"Density\") +\ntheme_bw() +\ntheme(legend.position = \"bottom\",\n      legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-37-1.png){width=960}\n:::\n:::\n\n\n## Accept-Reject Gamma RV\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nx <- c()\nn <- 0\nwhile(n < 10000){\n  e <- rexp(1, 1/2.3)\n  u <- runif(1)\n  f <- dgamma(e, 2.3, 1/1.2)\n  g <- dexp(e, 1/2.3) * 3\n  if (u < (f/g)){\n    x <- c(x, e)\n    n <- length(x)\n  }\n}\n```\n:::\n\n\n## Gamma RV\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx |> tibble(x = _) |> \nggplot(aes(x=x, y = ..density..)) + \ngeom_histogram(aes(color = \"Exponential\")) +\ngeom_line(data = tibble(x = xe, \n                        y = dgamma(x, shape = 2.3, scale = 1.2)), \n          aes(x,y, color = \"Gamma\")) +\nylab(\"Density\") +\ntheme_bw() +\ntheme(legend.position = \"bottom\",\n      legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-39-1.png){width=960}\n:::\n:::\n\n\n## Gamma Distribution R\n\n::: {.panel-tabset}\n## Description\n\nThe gamma distribution can be simulated in R using the `rgamma` function with the following arguments:\n\n-   `n`: number of values to generate\n-   `shape`: describes the shape of distribution ($\\alpha$)\n-   `scale`: the spread of the data ($\\beta$)\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrgamma(1, shape = 1.2, rate = .5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 3.404348\n```\n\n\n:::\n:::\n\n\n:::\n\n## Beta RV in R\n\n::: {.panel-tabset}\n## Description\n\nThe beta distribution can be simulated in R using the `rbeta` function with the following arguments:\n\n-   `n`: number of values to generate\n-   `shape1`: controls the shape of distribution\n-   `shape2`: controls the shape of distribution\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrbeta(1, shape1 = 1.2, shape2 = 6.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.1582012\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Bernoulli RV in R\n\n::: {.panel-tabset}\n## Description\n\nThe bernoulli distribution can be simulated in R using the `rbinom` function with the following arguments:\n\n-   `n`: number of values to generate\n-   `size = 1`: will give a bernoulli distribution\n-   `prob`: probability of observing 1 (success)\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrbinom(1, prob = .2, size = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0\n```\n\n\n:::\n:::\n\n\n:::\n\n## Binomial RV in R\n\n::: {.panel-tabset}\n## Description\n\nThe binomial distribution can be simulated in R using the `rbinom` function with the following arguments:\n\n-   `n`: number of values to generate\n-   `size`: how many bernoulli trials to conduct\n-   `prob`: probability of observing 1 (success)\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrbinom(1, prob = .5, size = 25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 13\n```\n\n\n:::\n:::\n\n\n:::\n\n## Negative Binomial RV in R\n\n::: {.panel-tabset}\n## Description\n\nThe negative binomial distribution can be simulated in R using the `rnbinom` function with the following arguments:\n\n-   `n`: number of values to generate\n-   `size`: number of successful trials\n-   `prob`: probability of observing 1 (success)\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnbinom(1, prob = .6, size = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0\n```\n\n\n:::\n:::\n\n\n:::\n\n# Transformation Methods\n\n## $N(0,1)$\n\n$$\nX \\sim N(\\mu, \\sigma^2)\n$$\n\n\n$$\nZ = \\frac{X-\\mu}{\\sigma} \\sim N(0,1)\n$$\n\n## $N(\\mu, \\sigma^2)$\n\n$$\nZ \\sim N(0,1)\n$$\n\n$$\nX = Z\\sigma + \\mu \\sim N(\\mu, \\sigma^2)\n$$\n\n## $\\chi^2(1)$\n\n$$\nZ \\sim N(0,1)\n$$\n\n$$\nZ^2 \\sim \\chi^2(1)\n$$\n\n## $F(m,n)$\n\n$$\nU \\sim \\chi^2(m)\n$$\n\n$$\nV \\sim \\chi^2(n)\n$$\n\n$$\nF = \\frac{U/m}{V/n} \\sim F(m,n)\n$$\n\n## $t(n)$\n\n$$\nZ \\sim N(0,1)\n$$\n\n\n$$\nU \\sim \\chi^2(m)\n$$\n\n$$\nT = \\frac{Z}{\\sqrt{U/m}} \\sim t(n)\n$$\n\n## $Beta(\\alpha, \\beta)$\n\n$$\nU \\sim Gamma(\\alpha,\\lambda)\n$$\n\n$$\nV \\sim Gamma(\\beta,\\lambda)\n$$\n\n$$\nX = \\frac{U}{U+V} \\sim Beta(\\alpha,\\beta)\n$$\n\n# Central Limit Theorem\n\n## Central Limit Theorem\n\nIf random variables $X_1, X_2, \\cdots, X_n$ are independent come from the same distribution ($iid$), $E(X_i) = \\mu <\\infty$ (finite), $Var(X_i) = \\sigma^2<\\infty$ (finite), then\n\n$$\n\\bar X \\sim N(\\mu, \\sigma^2/n)\n$$\n\n## Normal Distribution\n\nFor $n$ random variables:\n\n$$\nX_i \\sim N(4, 32)\n$$\nBy CLT\n\n$$\n\\bar X \\sim N(4, 32 / n)\n$$\n\n## Normal Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnorm <- function(x){\n  rnorm(10000, 4, sqrt(32))\n}\nX <- sapply(1:1000, norm)\nXbar <- apply(X, 2, mean)\nxx <- seq(min(Xbar)-.1, max(Xbar)+.1, length.out = 100)\nXbar |> tibble(x = _) |> \n  ggplot(aes(x=x, y = ..density..)) +\n    geom_histogram() +\n    geom_line(data = tibble(x = xx, y = dnorm(xx, 4, sqrt(32/10000))),\n              aes(x, y))\n```\n:::\n\n\n## Normal Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nnorm <- function(x){\n  rnorm(10000, 4, sqrt(32))\n}\nX <- sapply(1:1000, norm)\nXbar <- apply(X, 2, mean)\nxx <- seq(min(Xbar)-.1, max(Xbar)+.1, length.out = 100)\nXbar |> tibble(x = _) |> \n  ggplot(aes(x=x, y = ..density..)) +\n    geom_histogram() +\n    geom_line(data = tibble(x = xx, y = dnorm(xx, 4, sqrt(32/10000))),\n              aes(x, y)) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](3_files/figure-revealjs/unnamed-chunk-46-1.png){width=960}\n:::\n:::\n\n\n## Poisson Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nnorm <- function(x){\n  rpois(10000, 8.5)\n}\nX <- sapply(1:1000, norm)\nXbar <- apply(X, 2, mean)\nxx <- seq(min(Xbar)-.1, max(Xbar)+.1, length.out = 100)\nXbar |> tibble(x = _) |> \n  ggplot(aes(x=x, y = ..density..)) +\n    geom_histogram() +\n    geom_line(data = tibble(x = xx, y = dnorm(xx, 8.5, sqrt(8.5/10000))),\n              aes(x, y))\n```\n:::\n\n\n## Gamma Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nnorm <- function(x){\n  rgamma(10000, shape = 5, scale = 2)\n}\nX <- sapply(1:1000, norm)\nXbar <- apply(X, 2, mean)\nxx <- seq(min(Xbar)-.1, max(Xbar)+.1, length.out = 100)\nXbar |> tibble(x = _) |> \n  ggplot(aes(x=x, y = ..density..)) +\n    geom_histogram() +\n    geom_line(data = tibble(x = xx, y = dnorm(xx, 10, sqrt(20/10000))),\n              aes(x, y))\n```\n:::\n\n\n## Cauchy Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nnorm <- function(x){\n  rcauchy(10000, location = -1)\n}\nX <- sapply(1:1000, norm)\nXbar <- apply(X, 2, mean)\nXbar |> tibble(x = _) |> \n  ggplot(aes(x=x)) +\n    geom_histogram(bins = 100)\n```\n:::\n",
    "supporting": [
      "3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}