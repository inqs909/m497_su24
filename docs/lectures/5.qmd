---
title: "Monte Carlo Methods"
subtitle: "Statistical Inference"
format:
  revealjs:
    scrollable: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    incremental: false 
    chalkboard:
      src: chalkboard.json
      storage: chalkboard_pres
      theme: whiteboard
      chalk-width: 4
engine: knitr
knitr:
  opts_chunk: 
    code-fold: true
    echo: true
    eval: true
    comment: "#>" 
filters: 
  - reveal-header
  - reveal-auto-agenda
  - code-fullscreen
  - webr
webr: 
  show-startup-message: true
  packages: ['ggplot2', 'dplyr', 'stringr']
editor_options: 
  chunk_output_type: console
---
## R Packages

```{r}
#| code-fold: false

library(tidyverse)

```

# Hypothesis Testing

## Hypothesis Tests

Hypothesis tests are used to test whether claims are valid or not. This is conducted by collecting data, setting the **Null** and **Alternative** Hypothesis.

## Null Hypothesis $H_0$

The null hypothesis is the claim that is initially believed to be true. For the most part, it is always equal to the hypothesized value.

## Alternative Hypothesis $H_a$

The alternative hypothesis contradicts the null hypothesis.

## Example of Null and Alternative Hypothesis

We want to see if $\mu$ is different from $\mu_0$

| Null Hypothesis    | Alternative Hypothesis |
|--------------------|------------------------|
| $H_0: \mu=\mu_0$   | $H_a: \mu\ne\mu_0$     |
| $H_0: \mu\le\mu_0$ | $H_a: \mu>\mu_0$       |
| $H_0: \mu\ge\mu_0$ | $H_0: \mu<\mu_0$       |

## One-Side vs Two-Side Hypothesis Tests

Notice how there are 3 types of null and alternative hypothesis, The first type of hypothesis ($H_a:\mu\ne\mu_0$) is considered a 2-sided hypothesis because the rejection region is located in 2 regions. The remaining two hypotheses are considered 1-sided because the rejection region is located on one side of the distribution.

| Null Hypothesis    | Alternative Hypothesis | Side    |
|--------------------|------------------------|---------|
| $H_0: \mu=\mu_0$   | $H_a: \mu\ne\mu_0$     | 2-sided |
| $H_0: \mu\le\mu_0$ | $H_a: \mu>\mu_0$       | 1-sided |
| $H_0: \mu\ge\mu_0$ | $H_0: \mu<\mu_0$       | 1-sided |


# t-tests

## t-tests

t-tests are commonly used to determine whether a small sample is different from a hypothesized value.

::: fragment
$$
H_0:\ \mu = \mu_0
$$
:::

## Assumptions

::: incremental
-   Data Comes from a normal distribution ($N(\mu, \sigma^2)$)
-   The population variance $\sigma^2$ is unknown
-   Sample is small ($n<30$)
  -   When $n\geq30$, use a z-test thanks to [CLT](https://en.wikipedia.org/wiki/Central_limit_theorem)
  
:::

## T-statistic

$$
T = \frac{\bar x -\mu_0}{s/\sqrt{n}} \sim t(n-1)
$$

::: incremental
-   $\bar x$: sample mean
-   $s$: sample standard deviation
-   $n$: sample size
:::

## Why t distribution?

$$
t = \frac{N(0,1)}{\sqrt{\chi^2(n-1)/(n-1)}} \sim t(n-1)
$$
Knowing the distribution will allow us to compute the p-value!

## Monte Carlo Simulations

Use Monte Carlo Simulations to show that transforming a data set to the T-Statistic will yield a t-distribution. Use $H_0: \mu = 3$ and simulate 24 RV's from $N(3, 9)$. Testing how the distribution will look like assuming that the null hypothesis is true.

```{r}
#| code-fold: show
x <- rnorm(24, 3, 3)
```

Answer:
```{r}
t_stat <- function(i){
  x <- rnorm(24, 3, 3)
  tt <- (mean(x) - 3)/(sd(x)/sqrt(24))
  return(tt)
}
t_dist <- sapply(1:100000, t_stat)
xe <- seq(-5, 5, length.out = 100)
t_dist |> tibble(x = _) |> 
  ggplot(aes(x, y = ..density..)) +
  geom_histogram() +
  geom_line(data = tibble(x = xe, y = dt(xe, 23)),
            mapping = aes(x,y),
            col =  "red", lwd = 2)
```

# Sampling Distribution




# Monte Carlo P-Values

# Power Analysis

## Type 1 and 2 Error

```{r}


a1 <- data.frame(
   x = c(2.5,3.5),
   y = c(41, 41),
   label = c("Yes", "No")
)

a2 <- data.frame(
   x = c(1.9),
   y = c(25, 35),
   label = c("False", "True")
)
a3 <- tibble(x = c(1.7,3), 
             y = c(30, 43), 
             label = c("H0", "Reject H0"))

yay <- tibble(x = c(2.5, 3.5), 
              y = c(25, 35), 
              label = c("Yay!", "Yay!"))

type1 <- tibble(x = c(2.5, 3.5),
                y = c(36.5, 26.5),
                label = c("Type I Error", "Type II Error"))

type2 <- tibble(x = c(3.5, 2.5),
                y = c(24.5, 34.5),
                label = c("beta", "alpha"))


# basic graph
p <- ggplot() + theme_void()

# Add rectangles
p + annotate("rect", 
             xmin=c(2,3), xmax=c(3,4), 
             ymin=c(20,20), ymax=c(30,30), 
             alpha=0.2, color="green", fill="green") + 
    annotate("rect", 
             xmin=c(2,3), xmax=c(3,4), 
             ymin=c(30,30), ymax=c(40,40), 
             alpha=0.2, color="red", fill="red") +
    annotate("rect",
             xmin=c(3,2), xmax=c(4,3),
             ymin=c(30, 20), ymax=c(40, 30),
             alpha=0.8, color="royalblue", fill="royalblue") +
    geom_text(data=a1, aes(x=x, y=y, label=label),
             size=10 , fontface="bold" ) +
    geom_text(data=a3, aes(x=x, y=y, label=label),
             size=10 , fontface="bold.italic" ) +
    geom_text(data=a2, aes(x=x, y=y, label=label),
             size=10, angle = 90, fontface="bold" ) +
    geom_text(data=yay, aes(x=x, y=y, label=label),
             size=10, fontface="bold.italic" ) +
    geom_text(data=type1, aes(x=x, y=y, label=label),
             size=10, fontface="bold") +
    geom_text(data=type2, aes(x=x, y=y, label=label),
             size=10, fontface="bold", parse = T ) 

  

```



## Type 1 and 2 Error

```{r}
x <- seq(-4, 4, length.out = 1000)
xx <- seq(-1, 7, length.out = 1000)
dt_one<-function(x){
            y <- dnorm(x)
            y[x < qnorm(.94)] <-NA
            return(y)
}
dt_two<-function(x){
            y <- dnorm(x, mean = 3)
            y[x > 1.645] <-NA
            return(y)
}
df1 <- tibble(x = x, y = dnorm(x))
df2 <- tibble(x = xx, y = dnorm(xx, mean = 3))

a1 <- tibble(x = c(0,3), y = c(0.43, 0.43), label = c("H0", "H1"))
a2 <- tibble(x = c(2.05,1.25), y = c(0.02, 0.02), label = c(paste("alpha"), "beta"))

df1 |> 
  ggplot(aes(x, y)) +
    stat_function(fun = dt_one, geom = "area", fill = "red") +
    geom_line() +
    geom_line(aes(x, y), df2) +
    stat_function(fun = dt_two, geom = "area", fill = "green") +
    geom_vline(aes(xintercept = 1.645), lwd = 1.5) +
    geom_text(data=a1, aes(x=x,y=y, label=label),
              size=14 , fontface="bold.italic" ) +
    geom_text(data=a2, aes(x=x,y=y, label=label),
              size=10 , fontface="bold.italic", parse = T) +
    theme_bw()

```

## Power

Power is the probability of rejecting $H_0$ given that $H_1$.

$$
Power  = 1-\beta
$$

## Power

We want to ensure we have a high power and low type I error rate ($\alpha$).

::: fragment
As practitioners, we control $\alpha$. Set it before we conduct a study. Usually set at 0.05.
:::

::: fragment
We cannot control power because it is dependent by effect size, $\alpha$, and sample size.
:::

## Power Relationships

-   $\alpha \uparrow$ $\rightarrow$ $Power\ \uparrow$
-   $n \uparrow$ $\rightarrow$ $Power\ \uparrow$

## Power Analysis in R

The `pwr` package in R will conduct power and sample size for several common statistical tests. For more information, you can check this [vignette](https://cran.r-project.org/web/packages/pwr/vignettes/pwr-vignette.html) and their [github](https://github.com/heliosdrm/pwr).

## Monte Carlo Power Analysis

## Conceptial

```{r}
x <- seq(-4, 4, length.out = 1000)
xx <- seq(-1, 7, length.out = 1000)
dt_one<-function(x){
            y <- dnorm(x)
            y[x < qnorm(.94)] <-NA
            return(y)
}
dt_two<-function(x){
            y <- dnorm(x, mean = 3)
            y[x > 1.645] <-NA
            return(y)
}
df1 <- tibble(x = x, y = dnorm(x))
df2 <- tibble(x = xx, y = dnorm(xx, mean = 3))

a1 <- tibble(x = c(0,3), y = c(0.43, 0.43), label = c("H0", "H1"))
a2 <- tibble(x = c(2.05,1.25), y = c(0.02, 0.02), label = c(paste("alpha"), "beta"))

df1 |> 
  ggplot(aes(x, y)) +
    stat_function(fun = dt_one, geom = "area", fill = "red") +
    geom_line() +
    geom_line(aes(x, y), df2) +
    stat_function(fun = dt_two, geom = "area", fill = "green") +
    geom_vline(aes(xintercept = 1.645), lwd = 1.5) +
    geom_text(data=a1, aes(x=x,y=y, label=label),
              size=14 , fontface="bold.italic" ) +
    geom_text(data=a2, aes(x=x,y=y, label=label),
              size=10 , fontface="bold.italic", parse = T) +
    theme_bw()
```

