---
title: "Welcome to Math 497"
subtitle: "Intro to Monte Carlo Methods"
format:
  revealjs:
    scrollable: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    incremental: false 
    chalkboard:
      src: chalkboard.json
      storage: chalkboard_pres
      theme: whiteboard
      chalk-width: 4
engine: knitr
knitr:
  opts_chunk: 
    echo: true
    eval: false
    comment: "#>" 


revealjs-plugins:
  - verticator
  
filters: 
  - reveal-header
  - reveal-auto-agenda
  - code-fullscreen
  - webr

webr: 
  show-startup-message: true
---

## Introductions

-   San Bernardino, CA

-   CSU Monterey Bay

    -   BS Biology

-   San Diego State University

    -   Master's in Public Health

-   UC Riverside

    -   PhD in Applied Statistics

## Introductions

-   Name

-   Year

-   Major

-   Fun Fact

-   Career Goal

## Goals for the Course

-   Gain R Programming Skills

-   Learn Different Monte Carlo Methods

-   Conduct Simulation Studies



# Syllabus

## Syllabus

[Syllabus](https://m497.inqs.info/syllabus.html)

## Books
-   Statistical Computing (SC)
    -   Isaac Quintanilla Salinas
    -   <https://www.inqs.info/stat_comp/>
    -   <https://hypothes.is/groups/xMmDdj2A/m408>

# Introduction to R

## R Programming

R is a statistical programming package that allows you to conduct different types of analysis.

[R](https://www.r-project.org/)

## RStudio

A piece of software that organizes how you conduct statistical analysis in R.

[RStudio](https://posit.co/downloads/)

## Posit Cloud

A web version of RStudio.

[Posit Cloud](https://posit.cloud/login)

## R Packages

-   Tidyverse

-   csucistats

```{r}
#| eval: false
install.packages('csucistats', 
                 repos = c('https://inqs909.r-universe.dev', 
                           'https://cloud.r-project.org'))
```


# R Basics

## R as a calculator

R can evaluate different expressions in the console tab.

Try the following:

1.  $4(4+2)/34$
2.  $6^3$
3.  $3-1$
4.  $4+4/3+45(32*34-54)$

## R Calculator

```{webr-r}

```

## R Functions

R functions performs tasks to specific data values.

Evaluate the following values in R:

1.  $\sqrt{3}$
2.  $e^3$
3.  $\ln(53)$
4.  $\log(324)$
5.  $\sin(3)$
6.  $\sin(3\pi)$

## R Functions

```{webr-r}

```

## Types of Data

-   Numeric

-   Character

-   Logical

-   Missing

Evaluate the following code:

```{r}
#| eval: false

is.numeric(1)
is.numeric("1")
is.numeric(T)
is.numeric(NA)

```

## Types of Data

```{webr-r}

```


## Types of Objects

In R, an object contains a set of data. The most common types are `vectors` and `matrix`.

Run this code and print out the objects in the console:

```{r}
x <- 3:34
y <- matrix(1:20, nrow = 4)
```

## Types of objects

```{webr-r}

```


## Vectors

Use the `c()` function to create a container of data objects.

```{r}
x <- c(1,2,5,6:19, 3)
y <- c(3, 4,909,456,48,56)
z <- c(x, y, 134590)
```


## Data Frames

Data frames can be thought of as R's version of a data set.

Play around with mtcars:

```{r}
#| eval: true
mtcars 
```

## Lists

List can be thought as an extended vector, but each element is a different R object.

Try playing with this R object:

```{r}
list_one <- list(mtcars, rep(0, 4),
                 diag(rep(1, 3)))
```

## Lists

```{webr-r}

```


## Control Flow

The order a computer will complete tasks.

Usually incorporates statements and loops.

# Indexing

## Indexing

Within an R object, you can access an element by indexing it.

Indexing tells R which values to output.

## Vectors

A vector can be indexed by adding `[]` after the object's name and specifying the number of each element.

```{webr-r}
letters
letters[13]
```

## Matrices

A matrix can be indexed by adding `[]` after the object's name and specifying the number of each element. Separate the values by commas for specific indexes.

```{webr-r}
x <- matrix(1:40, nrow = 4)
```


# Comparing Numbers

## Comparing Numbers

You can compare two numbers, or objects, that will result in a logical output.

## Comparing Numbers Operators

| Operator | Description           |
|----------|-----------------------|
| `>`      | Greater Than          |
| `<`      | Less Than             |
| `>=`     | Greater than or equal |
| `<=`     | Less than or equal    |
| `==`     | Equals                |
| `!=`     | Not Equals            |

## Comparing Vectors

When you compare a number to a vector, it will result as a logical vector.

## Example

Try the following code and explain what is happening:

```{webr-r}
4 > 1:8

1:8 > 4
```

# `if`/`else` Statements

## if/else Statements

if/else statements are used to conduct specific tasks depending on the conditions

## `if` Statement

An `if` statement is used to if you want R to perform a specific function if a certain condition is met. An `if` statement will only run a task if a logical is returned. You will need type `if`, followed by the condition (as a logical) in parentheses, then the task.

## Example

```{webr-r}
x <- sample(-10:10,1)
if (x > 0){
  print("Positive")
}
print(x)

```

## else statement

An `else` statement will conduct a different task if the `if` statement does not conduct the tasks.

## Example

```{webr-r}
x <- sample(-10:10,1)
if (x > 0 ){
  print("Positive")
} else {
  print("Non-positive")
} 
print(x)

```

## Chain if/else statement

If you have more than two options, you can chain `if/else` statements by adding an `if` statement immediately after the word `else`.

## Example

```{webr-r}
x <- sample(-10:10,1)
if (x > 0 ){
  print("Positive")
} else if (x == 0) {
  print("Zero")
} else {
  print("Negative")
}
print(x)

```


# `for` Loops

## `for` Loops

`for` loops are used to conduct an iterative task with slight changes to the input. The general format goes as follows:

```{r}
for (index in vector){
  Conduct task
}
```

You will repeat the `for` loop untie all the elements in the vector have been used.

## Example

Compute the mean:

$$
\bar x = \frac{1}{n}\sum^n_{i=1}x_i
$$

```{r}
#| eval: true
x <- rnorm(100)
mean(x)
```

## Example

```{webr-r}

```


## Example

Compute the variance:

$$
s^2 = \frac{1}{n-1}\sum^n_{i-1}(x_i-\bar x)^2
$$

```{r}
#| eval: true
x <- rnorm(100)
var(x)
```

## Example

```{webr-r}

```

# `next` Statements

## `next` Statements

The `next` statement is used to skip an iteration of a loop. This is used along an `if` statement.

```{r}
#| eval: false

for (i in vector){
  perform task
  if (condition){
    next
  } else {
    perform task
  }
}

```

# `break` Statements

## `break` Statements

The `break` statement is used to stop a loop if the condition is met. This is used along with an `if` statement.

```{r}
#| eval: false

for (i in vector){
  perform task
  if (condition){
    break
  } else {
    perform task
  }
}
```
