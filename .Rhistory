}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
t_stat_sim <- function(i){
x <- runif(35, 0, 10)
tt <- max(x)
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
#| code-fold: false
y <- runif(35, 0, 8)
#| eval: false
tstat <- max(y)
t_stat_sim <- function(i){
x <- runif(35, 0, 10)
tt <- max(x)
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
sum(abs(tstat) < abs(t_dist))
(sum(abs(tstat) < abs(t_dist)) + 1) / (length(t_dist) + 1)
sum(tstat > t_dist)
sum(tstat > t_dist)
(sum(tstat > t_dist) + 1) / (length(t_dist) + 1)
data()
data("lakers")
lakers
?lakers
fish_encounters
?fish_encounters
data()
?seals
seals
sunspots
?sunspots
randu
fdeaths
fdeaths |> class()
sum(fdeaths)
?fdeaths
mean(fdeaths)
fdeaths |> hist()
fdeaths |> length()
tstat <- mean(fdeaths)
t_stat_sim <- function(i){
x <- rpois(72, 600)
tt <- mean(x)
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
tstat <- mean(fdeaths)
t_stat_sim <- function(i){
x <- rpois(72, 400)
tt <- mean(x)
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
tstat <- mean(fdeaths)
t_stat_sim <- function(i){
x <- rpois(72, 500)
tt <- mean(x)
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
sum(tstat > t_dist)
fdeaths |> hist()
t_stat_sim <- function(i){
x <- rpois(72, 550)
tt <- mean(x)
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
x <- rnorm(24, 3, 3)
x
t_stat <- function(i){
x <- rnorm(24, 3, 3)
tt <- (mean(x) - 3)/(sd(x)/sqrt(24))
return(tt)
}
t_dist <- sapply(1:100000, t_stat)
xe <- seq(-5, 5, length.out = 100)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_line(data = tibble(x = xe, y = dt(xe, 23)),
mapping = aes(x,y),
col =  "red", lwd = 2)
library(tidyverse)
x <- rnorm(24, 3, 3)
t_stat <- function(i){
x <- rnorm(24, 3, 3)
tt <- (mean(x) - 3)/(sd(x)/sqrt(24))
return(tt)
}
t_dist <- sapply(1:100000, t_stat)
xe <- seq(-5, 5, length.out = 100)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_line(data = tibble(x = xe, y = dt(xe, 23)),
mapping = aes(x,y),
col =  "red", lwd = 2)
tstat <- (mean(x) - 3)/(sd(x)/sqrt(24))
t_stat_sim <- function(i){
x <- rnorm(24, 3, 3)
tt <- (mean(x) - 3)/(sd(x)/sqrt(24))
return(tt)
}
x <- rnorm(24, 3, 3)
tstat <- (mean(x) - 3)/(sd(x)/sqrt(24))
t_stat_sim <- function(i){
x <- rnorm(24, 3, 3)
tt <- (mean(x) - 3)/(sd(x)/sqrt(24))
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
y <- runif(35, 0, 8)
tstat <- max(y)
t_stat_sim <- function(i){
x <- runif(35, 0, 10)
tt <- max(x)
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
sum(tstat > t_dist)
(sum(tstat > t_dist) + 1) / (length(t_dist) + 1)
tstat <- mean(fdeaths)
t_stat_sim <- function(i){
x <- rpois(72, 550)
tt <- mean(x)
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
#| code-fold: show
x <- rnorm(24, 6, 3)
#| eval: false
tstat <- (mean(x) - 3)/(sd(x)/sqrt(24))
t_stat_sim <- function(i){
x <- rnorm(24, 6, 3)
tt <- (mean(x) - 6)/(sd(x)/sqrt(24))
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
# Chunk 1
#| code-fold: false
library(tidyverse)
theme_set(theme_bw())
# Chunk 2
a1 <- data.frame(
x = c(2.5,3.5),
y = c(41, 41),
label = c("Yes", "No")
)
a2 <- data.frame(
x = c(1.9),
y = c(25, 35),
label = c("False", "True")
)
a3 <- tibble(x = c(1.7,3),
y = c(30, 43),
label = c("H0", "Reject H0"))
yay <- tibble(x = c(2.5, 3.5),
y = c(25, 35),
label = c("Yay!", "Yay!"))
type1 <- tibble(x = c(2.5, 3.5),
y = c(36.5, 26.5),
label = c("Type I Error", "Type II Error"))
type2 <- tibble(x = c(3.5, 2.5),
y = c(24.5, 34.5),
label = c("beta", "alpha"))
# basic graph
p <- ggplot() + theme_void()
# Add rectangles
p + annotate("rect",
xmin=c(2,3), xmax=c(3,4),
ymin=c(20,20), ymax=c(30,30),
alpha=0.2, color="green", fill="green") +
annotate("rect",
xmin=c(2,3), xmax=c(3,4),
ymin=c(30,30), ymax=c(40,40),
alpha=0.2, color="red", fill="red") +
annotate("rect",
xmin=c(3,2), xmax=c(4,3),
ymin=c(30, 20), ymax=c(40, 30),
alpha=0.8, color="royalblue", fill="royalblue") +
geom_text(data=a1, aes(x=x, y=y, label=label),
size=10 , fontface="bold" ) +
geom_text(data=a3, aes(x=x, y=y, label=label),
size=10 , fontface="bold.italic" ) +
geom_text(data=a2, aes(x=x, y=y, label=label),
size=10, angle = 90, fontface="bold" ) +
geom_text(data=yay, aes(x=x, y=y, label=label),
size=10, fontface="bold.italic" ) +
geom_text(data=type1, aes(x=x, y=y, label=label),
size=10, fontface="bold") +
geom_text(data=type2, aes(x=x, y=y, label=label),
size=10, fontface="bold", parse = T )
# Chunk 3
x <- seq(-4, 4, length.out = 1000)
xx <- seq(-1, 7, length.out = 1000)
dt_one<-function(x){
y <- dnorm(x)
y[x < qnorm(.94)] <-NA
return(y)
}
dt_two<-function(x){
y <- dnorm(x, mean = 3)
y[x > 1.645] <-NA
return(y)
}
df1 <- tibble(x = x, y = dnorm(x))
df2 <- tibble(x = xx, y = dnorm(xx, mean = 3))
a1 <- tibble(x = c(0,3), y = c(0.43, 0.43), label = c("H0", "H1"))
a2 <- tibble(x = c(2.05,1.25), y = c(0.02, 0.02), label = c(paste("alpha"), "beta"))
df1 |>
ggplot(aes(x, y)) +
stat_function(fun = dt_one, geom = "area", fill = "red") +
geom_line() +
geom_line(aes(x, y), df2) +
stat_function(fun = dt_two, geom = "area", fill = "green") +
geom_vline(aes(xintercept = 1.645), lwd = 1.5) +
geom_text(data=a1, aes(x=x,y=y, label=label),
size=14 , fontface="bold.italic" ) +
geom_text(data=a2, aes(x=x,y=y, label=label),
size=10 , fontface="bold.italic", parse = T) +
theme_bw()
# Chunk 4
x <- seq(-4, 4, length.out = 1000)
xx <- seq(-1, 7, length.out = 1000)
dt_one<-function(x){
y <- dnorm(x)
y[x < qnorm(.94)] <-NA
return(y)
}
dt_two<-function(x){
y <- dnorm(x, mean = 3)
y[x > 1.645] <-NA
return(y)
}
df1 <- tibble(x = x, y = dnorm(x))
df2 <- tibble(x = xx, y = dnorm(xx, mean = 3))
a1 <- tibble(x = c(0,3), y = c(0.43, 0.43), label = c("H0", "H1"))
a2 <- tibble(x = c(2.05,1.25), y = c(0.02, 0.02), label = c(paste("alpha"), "beta"))
df1 |>
ggplot(aes(x, y)) +
stat_function(fun = dt_one, geom = "area", fill = "red") +
geom_line() +
geom_line(aes(x, y), df2) +
stat_function(fun = dt_two, geom = "area", fill = "green") +
geom_vline(aes(xintercept = 1.645), lwd = 1.5) +
geom_text(data=a1, aes(x=x,y=y, label=label),
size=14 , fontface="bold.italic" ) +
geom_text(data=a2, aes(x=x,y=y, label=label),
size=10 , fontface="bold.italic", parse = T) +
theme_bw()
# Chunk 5
#| code-fold: show
x <- rnorm(24, 6, 3)
#| eval: false
tstat <- (mean(x) - 3)/(sd(x)/sqrt(24))
t_stat_sim <- function(i){
x <- rnorm(24, 6, 3)
tt <- (mean(x) - 6)/(sd(x)/sqrt(24))
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
sum(abs(tstat) < abs(t_dist))
(sum(abs(tstat) < abs(t_dist)) + 1) / (length(t_dist) + 1)
#| eval: false
tstat <- (mean(x) - 6)/(sd(x)/sqrt(24))
#| code-fold: show
x <- rnorm(24, 3, 3)
#| eval: false
tstat <- (mean(x) - 6)/(sd(x)/sqrt(24))
t_stat_sim <- function(i){
x <- rnorm(24, 6, 3)
tt <- (mean(x) - 6)/(sd(x)/sqrt(24))
return(tt)
}
t_dist <- sapply(1:100000, t_stat_sim)
t_dist |> tibble(x = _) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(aes(xintercept = tstat), col = "red")
sum(abs(tstat) < abs(t_dist))
(sum(abs(tstat) < abs(t_dist)) + 1) / (length(t_dist) + 1)
alpha <- 0.05
cv <- qt(1-alpha/2)
cv <- qt(1-alpha/2, 23)
cv
t_stat_sim <- function(i, mu){
x <- rnorm(24, mu, 3)
tt <- (mean(x) - 6)/(sd(x)/sqrt(24))
return(cv < abs(tt))
}
alpha <- 0.05
cv <- qt(1-alpha/2, 23)
t_stat_sim <- function(i, mu){
x <- rnorm(24, mu, 3)
tt <- (mean(x) - 6)/(sd(x)/sqrt(24))
return(cv < abs(tt))
}
t_dist <- sapply(1:100000, t_stat_sim, mu = 5)
mean(t_dist)
mus <- 0:12
mus <- 0:12
powers <- c()
for(i in 1:13){
t_dist <- sapply(1:100000, t_stat_sim, mu = mus[i])
powers <- c(powers, mean(t_dist))
}
powers
tibble(x = mus, y = powers) |>
ggplot(aes(x, y)) +
geom_line()
tibble(x = mus, y = powers) |>
ggplot(aes(x, y)) +
geom_line() +
ylab("Power")
#| code-fold: show
x <- 1:20
#| code-fold: show
x <- 1:20
sample(x, 5, replace = T)
sample(x, 10, replace = T)
#| code-fold: show
x <- 1:20
sample(x, 10, replace = F)
tuesdata <- tidytuesdayR::tt_load(2020, week = 28)
coffee_ratings <- tuesdata$coffee_ratings
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
res <- lm(flavor ~ aroma, data = coffee_aroma)
res
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
coffee_aroma |> ggplot(aes(x=aroma, y = flavor)) +
geom_point() + theme_bw() +
theme(axis.title = element_text(size = 36))
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
gf_theme(theme_bw()) %>%
gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
gf_theme(axis.title = element_text(size = 24))
#| include: false
library(palmerpenguins)
library(ggformula)
library(ThemePark)
library(mosaic)
library(tidyverse)
library(taylor)
library(DT)
library(supernova)
library(coursekata)
set.seed(29)
# penguins_nona <- penguins |> drop_na() |>
#   filter(species != "Chinstrap") |>
#   slice_sample(n=8) |>
#   select(species, bill_length_mm)
# tuesdata <- tidytuesdayR::tt_load('2020-07-07')
tuesdata <- tidytuesdayR::tt_load(2020, week = 28)
coffee_ratings <- tuesdata$coffee_ratings
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
res <- lm(flavor ~ aroma, data = coffee_aroma)
# Or read in the data manually
#coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
coffee_aroma |> ggplot(aes(x=aroma, y = flavor)) +
geom_point() + theme_bw() +
theme(axis.title = element_text(size = 36)) +
geom_smooth(method = "lm", se = F)
#| echo: true
res <- lm(flavor ~ aroma, data = coffee_aroma)
res
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
coffee_aroma |> ggplot(aes(x=aroma, y = flavor)) +
geom_point() + theme_bw() +
theme(axis.title = element_text(size = 36))
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
gf_theme(theme_bw()) %>%
gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
gf_theme(axis.title = element_text(size = 24))
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
gf_theme(theme_bw()) %>%
gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
gf_theme(axis.title = element_text(size = 24))
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
gf_point(flavor ~ aroma, data = coffee_aroma, color = "red") %>%
gf_theme(theme_bw()) %>%
gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
gf_theme(axis.title = element_text(size = 24))
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
gf_theme(theme_bw()) %>%
gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
gf_theme(axis.title = element_text(size = 24)) %>%
gf_smooth(method = "lm")
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
gf_theme(theme_bw()) %>%
gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
gf_theme(axis.title = element_text(size = 24)) %>%
gf_smooth(method = "lm") %>%
gf_coefline(model = res, color = "red")
#| echo: true
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
shuffle <- function(x){
n <- length(x)
return(sample(x, n))
}
penguins <- penguins |> drop_na() |>
mutate(body_mass_kg = body_mass_g / 1000)
library(palmerpenguins)
theme_set(theme_bw())
tuesdata <- tidytuesdayR::tt_load(2020, week = 28)
coffee_ratings <- tuesdata$coffee_ratings
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
res <- lm(flavor ~ aroma, data = coffee_aroma)
shuffle <- function(x){
n <- length(x)
return(sample(x, n))
}
penguins <- penguins |> drop_na() |>
mutate(body_mass_kg = body_mass_g / 1000)
penguins
penguins <- penguins |> drop_na()
library(palmerpenguins)
penguins |> ggplot(aes(x=species, y = body_mass_kg)) +
geom_jitter() + theme_bw() +
theme(axis.title = element_text(size = 36)) +
labs(x = "Species", y = "Body Mass")
penguins |> ggplot(aes(x=species, y = body_mass_kg)) +
geom_jitter() + theme_bw() +
theme(axis.title = element_text(size = 36)) +
labs(x = "Species", y = "Body Mass")
penguins |> ggplot(aes(x=species, y = body_mass_kg)) +
geom_jitter() + geom_boxplot() + theme_bw() +
theme(axis.title = element_text(size = 36)) +
labs(x = "Species", y = "Body Mass")
#| code-fold: true
penguins |> ggplot(aes(x=species, y = body_mass_kg)) +
geom_jitter() +
geom_boxplot()
theme(axis.title = element_text(size = 36)) +
labs(x = "Species", y = "Body Mass")
#| echo: true
penguins %>% gf_jitter(shuffle(body_mass_kg) ~ species) %>%
gf_theme(theme_bw()) %>%
gf_labs(x = "Quarter Mile Time", y = "MPG") %>%
gf_theme(axis.title = element_text(size = 24))
shuffle <- function(x){n <- length(x); return(sample(x, n))}
penguins |> ggplot(aes(x = species, y = body_mass_g)) +
theme_bw() +labs(x = "Species", y = "Body Mass") + theme(axis.text = element_text(size = 18)) +
geom_jitter()
shuffle <- function(x){n <- length(x); return(sample(x, n))}
penguins |> ggplot(aes(x = species, y = body_mass_kg)) +
theme_bw() +labs(x = "Species", y = "Body Mass") + theme(axis.text = element_text(size = 18)) +
geom_jitter()
