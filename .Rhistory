penguins |> ggplot(aes(x = species, y = body_mass_g)) +
labs(x = "Species", y = "Body Mass") +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(aes(species, shuffle(body_mass_g))) +
geom_jitter(col = "red")
pengiuns |> aov(body_mass_g ~ species, data = _) |> anova()
penguins <- penguins |> drop_na()
pengiuns |> aov(body_mass_g ~ species, data = _) |> anova()
penguins
penguins |> aov(body_mass_g ~ species, data = _) |> anova()
test <- penguins |> aov(body_mass_g ~ species, data = _) |> anova()
test
test$`F value`
test$`F value`[1]
penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
ff <- penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
f_sim <- function(i){
ff <- penguins |>
aov(shuffle(body_mass_g) ~ species, data = _) |>
anova() |>
_$`F value`[1]
return(ff)
}
f_dist <- replicate(10000, f_sim(1))
f_stat <- penguins |>
aov(body_mass_g ~ species, data = _) |>
anova() |>
_$`F value`[1]
f_dist
f_stat
mean(f_stat < f_dist)
sum(f_stat < f_dist) + 1 / (length(f_dist) + 1)
?theme_set
#| code-fold: false
library(tidyverse)
library(palmerpenguins)
theme_set(theme_bw())
theme_update(axis.title = element_text(size = 24))
tuesdata <- tidytuesdayR::tt_load(2020, week = 28)
coffee_ratings <- tuesdata$coffee_ratings
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
shuffle <- function(x){
n <- length(x)
return(sample(x, n))
}
penguins <- penguins |> drop_na()
coffee_aroma |> ggplot(aes(x=aroma, y = flavor)) +
geom_point() + theme_bw() +
theme() +
geom_smooth(method = "lm", se = F)
coffee_aroma |> ggplot(aes(x=aroma, y = flavor)) +
geom_point() + theme_bw() +
geom_smooth(method = "lm", se = F)
tibble(x= f_dist) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram()
tibble(x= f_dist) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(xintercept = f_stat)
coffee_aroma |> ggplot(aes(x=aroma, y = shuffle(flavor))) +
geom_point() + theme_bw() +
geom_smooth(method = "lm", se = F)
coffee_aroma |> ggplot() +
geom_smooth(method = "lm", se = F)
coffee_aroma |> ggplot() +
geom_smooth(mapping = aes(aroma, flavor), method = "lm", se = F)
coffee_aroma |> ggplot() +
geom_smooth(mapping = aes(aroma, flavor), method = "lm", se = F, col = "red")
coffee_aroma |> ggplot() +
geom_smooth(mapping = aes(aroma, flavor), method = "lm", se = F, col = "red") +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F)
coffee_aroma |> ggplot() +
geom_smooth(mapping = aes(aroma, flavor), method = "lm", se = F, col = "red") +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F)
coffee_aroma |> ggplot() +
geom_smooth(mapping = aes(aroma, flavor), method = "lm", se = F, col = "red") +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F) +
geom_smooth(mapping = aes(aroma, shuffle(flavor)), method = "lm", se = F)
coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
summary()
test <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
summary()
names(test)
test$coefficients
test$coefficients[2,1]
test <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
summary() |>
_$coefficients[2,1]
test
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
summary() |>
_["coefficients"][2,1]
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
summary() |>
_["coefficients"]
f_stat
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _)
f_stat
f_stat |> names()
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_[[1]]
f_stat
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_[[1]][2]
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_[[1]] |> _[2]
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_[[1]]
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_$coefficients
f_stat
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_$coefficients[2]
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_$coefficients |>
_[2]
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_$`coefficients`[2]
f_stat <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_$`coefficients`[2]
f_sim <- function(i){
ff <- coffee_aroma |>
lm(flavor ~ aroma, data = _) |>
_$`coefficients`[2]
return(ff)
}
f_dist <- replicate(10000, f_sim(1))
tibble(x= f_dist) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(xintercept = f_stat)
sum(f_stat < f_dist) + 1 / (length(f_dist) + 1)
f_dist
f_sim <- function(i){
ff <- coffee_aroma |>
lm(shuffle(flavor) ~ aroma, data = _) |>
_$`coefficients`[2]
return(ff)
}
f_dist <- replicate(10000, f_sim(1))
tibble(x= f_dist) |>
ggplot(aes(x, y = ..density..)) +
geom_histogram() +
geom_vline(xintercept = f_stat)
sum(f_stat < f_dist) + 1 / (length(f_dist) + 1)
#| echo: false
grid <- expand.grid(1:3, 3:1)
df <- data.frame(x = grid[, 1],
y = grid[, 2],
image = sample(c("grumpy", "lil_bub", "maru"),
9, replace = T))
library(ggplot2)
ggplot(df) + theme_void() +
geom_cat(aes(x, y, cat = image), size = 5) +
xlim(c(0.25, 3.5)) +
ylim(c(-0.5, 3.5)) +
geom_curve(aes(x = 1.35, y = 3, xend = 1.65, yend = 3),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 2.35, y = 3, xend = 2.65, yend = 3),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 3, y = 2.65, xend = 3, yend = 2.35),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 2.65, y = 2, xend = 2.35, yend = 2),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 1.65, y = 2, xend = 1.35, yend = 2),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 1, y = 1.65, xend = 1, yend = 1.35),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +     geom_curve(aes(x = 1.35, y = 1, xend = 1.65, yend = 1),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 2.35, y = 1, xend = 2.65, yend = 1),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 3, y = 0.55, xend = 3, yend = 0.35),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
annotate("text", x=3, y=-0.25, label= "???", size = 48)
#| echo: false
grid <- expand.grid(1:3, 3:1)
df <- data.frame(x = grid[, 1],
y = grid[, 2],
image = sample(c("grumpy", "lil_bub", "maru"),
9, replace = T))
library(ggplot2)
library(ggcats)
ggplot(df) + theme_void() +
geom_cat(aes(x, y, cat = image), size = 5) +
xlim(c(0.25, 3.5)) +
ylim(c(-0.5, 3.5)) +
geom_curve(aes(x = 1.35, y = 3, xend = 1.65, yend = 3),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 2.35, y = 3, xend = 2.65, yend = 3),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 3, y = 2.65, xend = 3, yend = 2.35),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 2.65, y = 2, xend = 2.35, yend = 2),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 1.65, y = 2, xend = 1.35, yend = 2),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 1, y = 1.65, xend = 1, yend = 1.35),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +     geom_curve(aes(x = 1.35, y = 1, xend = 1.65, yend = 1),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 2.35, y = 1, xend = 2.65, yend = 1),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
geom_curve(aes(x = 3, y = 0.55, xend = 3, yend = 0.35),
arrow = arrow(length = unit(0.03, "npc"), type="closed"),
colour = "red", size = 3, curvature = 0, angle = 90) +
annotate("text", x=3, y=-0.25, label= "???", size = 48)
# Chunk 1
#| code-fold: false
library(tidyverse)
library(palmerpenguins)
theme_set(theme_bw())
theme_update(axis.title = element_text(size = 24))
tuesdata <- tidytuesdayR::tt_load(2020, week = 28)
coffee_ratings <- tuesdata$coffee_ratings
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
shuffle <- function(x){
n <- length(x)
return(sample(x, n))
}
resample <- function(df){
if (!is.data.frame(df)){
stop("The df object must be a data frame.")
}
dplyr::slice_sample(df, n = nrow(df), replace = T )
}
penguins <- penguins |> drop_na()
penguins |> group_by(species) |>
summarise(mean = mean(body_mass_g),
se = sd(body_mass_g) / sqrt(n()))
penguins |> group_by(species) |>
summarise(mean = mean(body_mass_g)) |> unlist()
penguins |> group_by(species) |>
summarise(mean = mean(body_mass_g)) |>
select(mean) |>
unlist()
means <- penguins |> group_by(species) |>
summarise(mean = mean(body_mass_g)) |>
select(mean) |>
unlist()
means <- penguins$body_mass_g |> tapply(penguins$species, mean)
means
nns <- penguins$body_mass_g |> tapply(penguins$species, length)
nns
sds <- penguins$body_mass_g |> sd()
sds
means
Ameans <- numeric(10000)
Cmeans <- numeric(10000)
Gmeans <- numeric(10000)
Gmeans
for (i in 1:10000){
Ameans[i] <- rnorm(nns[1], mean = means[1], sd = sds[1]) |> mean()
Cmeans[i] <- rnorm(nns[2], mean = means[2], sd = sds[2]) |> mean()
Gmeans[i] <- rnorm(nns[3], mean = means[3], sd = sds[3]) |> mean()
}
means <- penguins$body_mass_g |> tapply(penguins$species, mean)
nns <- penguins$body_mass_g |> tapply(penguins$species, length)
sds <- penguins$body_mass_g |> tapply(penguins$species, sd)
Ameans <- numeric(10000)
Cmeans <- numeric(10000)
Gmeans <- numeric(10000)
for (i in 1:10000){
Ameans[i] <- rnorm(nns[1], mean = means[1], sd = sds[1]) |> mean()
Cmeans[i] <- rnorm(nns[2], mean = means[2], sd = sds[2]) |> mean()
Gmeans[i] <- rnorm(nns[3], mean = means[3], sd = sds[3]) |> mean()
}
Ameans
Cmeans
Gmeans
sd(Ameans)
penguins |> group_by(species) |>
summarise(mean = mean(body_mass_g),
se = sd(body_mass_g) / sqrt(n()))
#| code-fold: show
library(brms)
y <- rnorm(10000, mean = 3, sd = 1)
?prior
#| code-fold: show
library(brms)
brm(y~1, data = tibble(y = y),
family = gaussian(),
prior = c(prior(normal(0, 100), class = b),
prior(inv_gamma(1,1), class = sd)))
brm(y~1, data = tibble(y = y),
family = gaussian(),
prior = c(prior(normal(0, 100), coef = "Intercept"),
prior(inv_gamma(1,1), class = sd)))
brm(y~1, data = tibble(y = y),
family = gaussian())
brm(y~1, data = tibble(y = y),
family = gaussian(),
prior = c(prior(normal(0, 100), coef = "Intercept"),
prior(inv_gamma(1,1), dpar = "sigma")))
brm(y~1, data = tibble(y = y),
family = gaussian(),
prior = c(prior(normal(0, 100), class = "b"),
prior(inv_gamma(1,1), class = "sd")))
?default_prior
y <- rpois(10000, 3)
brm(y~1, data = tibble(y = y),
family = poisson())
library(tidyverse)
library(palmerpenguins)
theme_set(theme_bw())
theme_update(axis.title = element_text(size = 24))
tuesdata <- tidytuesdayR::tt_load(2020, week = 28)
coffee_ratings <- tuesdata$coffee_ratings
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
shuffle <- function(x){
n <- length(x)
return(sample(x, n))
}
resample <- function(df){
if (!is.data.frame(df)){
stop("The df object must be a data frame.")
}
dplyr::slice_sample(df, n = nrow(df), replace = T )
}
penguins <- penguins |> drop_na()
penguins
View(penguins)
penguins |> group_by(species) |>
summarise(mean = mean(body_mass_g),
se = sd(body_mass_g) / sqrt(n()))
ameans <- tapply(penguins$body_mass_g, penguins$species, mean)
ameans
means <- tapply(penguins$body_mass_g, penguins$species, mean)
sds <- tapply(penguins$body_mass_g, penguins$species, mean)
sds <- tapply(penguins$body_mass_g, penguins$species, sd)
sds
penguins |> ggplot(aes(body_mass_g, color = species)) +
geom_density()
means <- tapply(penguins$body_mass_g, penguins$species, mean)
means
sds <- tapply(penguins$body_mass_g, penguins$species, sd)
nn <- tapply(penguins$body_mass_g, penguins$species, length)
nn
cmeans <- numeric(10000)
gmeans <- numeric(10000)
ameans <- numeric(10000)
cmeans <- numeric(10000)
gmeans <- numeric(10000)
for(i in 1:10000){
ameans[i] <- rnorm(nn[1], means[1], sds[1]) |> mean()
cmeans[i] <- rnorm(nn[2], means[2], sds[2]) |> mean()
gmeans[i] <- rnorm(nn[3], means[3], sds[3]) |> mean()
}
ameans |> hist()
sd(ameans)
sd(cmeans)
sd(gmeans)
penguins |> group_by(species) |>
summarise(mean = mean(body_mass_g),
se = sd(body_mass_g) / sqrt(n()))
sd(ameans)
sd(cmeans)
sd(gmeans)
library(palmerpenguins)
library(tidyverse)
penguins <- penguins |> drop_na()
penguins |> lm(body_mass_g ~ flipper_length_mm + bill_length_mm + bill_depth_mm,
data = _)
b1 <- resample(penguins)
b1 |> lm(body_mass_g ~ flipper_length_mm + bill_length_mm + bill_depth_mm,
data = _) |> coef()
penguins |> lm(body_mass_g ~ flipper_length_mm + bill_length_mm + bill_depth_mm,
data = _) |> coef()
b1 |> lm(body_mass_g ~ flipper_length_mm + bill_length_mm + bill_depth_mm,
data = _) |> coef()
post <- b1 |> lm(body_mass_g ~ flipper_length_mm + bill_length_mm + bill_depth_mm,
data = _) |> coef()
boots <- function(i){
b1 <- resample(penguins)
post <- b1 |> lm(body_mass_g ~ flipper_length_mm + bill_length_mm + bill_depth_mm,
data = _) |> coef()
return(post)
}
boots(3)
boot_res <- sapply(1:10000, boots)
boot_res
dim(boot_res)
penguins |> lm(body_mass_g ~ flipper_length_mm + bill_length_mm + bill_depth_mm,
data = _) |> coef()
boot_res[1,] |> hist()
boot_res[2,] |> hist()
boot_res[3,] |> hist()
boot_res[4,] |> hist()
apply(boot_res, 1, sd)
penguins |> lm(body_mass_g ~ flipper_length_mm + bill_length_mm + bill_depth_mm,
data = _) |> summary()
apply(boot_res, 1, quantile, probs = c(0.025, 0.975))
library(brms)
y <- rnorm(10000, mean = 3, sd = 1)
brm(y~1, data = tibble(y = y),
family = gaussian())
y <- rpois(10000, 3)
brm(y~1, data = tibble(y = y),
family = poisson(),
iter = 10000)
y <- rpois(10000, 3)
exp(1.1)
library(tidyverse)
?left_join
