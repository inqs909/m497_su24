{
  "hash": "a9a659d9019a31aa2c095dd75005c1d6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Monte Carlo Methods\"\nsubtitle: \"Statistical Inference\"\nformat:\n  revealjs:\n    include-in-header: \"math_commands.html\"\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nengine: knitr\nknitr:\n  opts_chunk: \n    code-fold: true\n    echo: true\n    eval: true\n    comment: \"#>\" \nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - code-fullscreen\n  - webr\nwebr: \n  show-startup-message: true\n  packages: ['ggplot2', 'dplyr', 'stringr']\neditor_options: \n  chunk_output_type: console\n---\n\n## R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\ntheme_set(theme_bw())\n```\n:::\n\n\n# Hypothesis Testing\n\n## Hypothesis Tests\n\nHypothesis tests are used to test whether claims are valid or not. This is conducted by collecting data, setting the **Null** and **Alternative** Hypothesis.\n\n## Null Hypothesis $H_0$\n\nThe null hypothesis is the claim that is initially believed to be true. For the most part, it is always equal to the hypothesized value.\n\n## Alternative Hypothesis $H_a$\n\nThe alternative hypothesis contradicts the null hypothesis.\n\n## Example of Null and Alternative Hypothesis\n\nWe want to see if $\\mu$ is different from $\\mu_0$\n\n| Null Hypothesis    | Alternative Hypothesis |\n|--------------------|------------------------|\n| $H_0: \\mu=\\mu_0$   | $H_a: \\mu\\ne\\mu_0$     |\n| $H_0: \\mu\\le\\mu_0$ | $H_a: \\mu>\\mu_0$       |\n| $H_0: \\mu\\ge\\mu_0$ | $H_0: \\mu<\\mu_0$       |\n\n## One-Side vs Two-Side Hypothesis Tests\n\nNotice how there are 3 types of null and alternative hypothesis, The first type of hypothesis ($H_a:\\mu\\ne\\mu_0$) is considered a 2-sided hypothesis because the rejection region is located in 2 regions. The remaining two hypotheses are considered 1-sided because the rejection region is located on one side of the distribution.\n\n| Null Hypothesis    | Alternative Hypothesis | Side    |\n|--------------------|------------------------|---------|\n| $H_0: \\mu=\\mu_0$   | $H_a: \\mu\\ne\\mu_0$     | 2-sided |\n| $H_0: \\mu\\le\\mu_0$ | $H_a: \\mu>\\mu_0$       | 1-sided |\n| $H_0: \\mu\\ge\\mu_0$ | $H_0: \\mu<\\mu_0$       | 1-sided |\n\n\n# t-tests\n\n## t-tests\n\nt-tests are commonly used to determine whether a small sample is different from a hypothesized value.\n\n::: fragment\n$$\nH_0:\\ \\mu = \\mu_0\n$$\n:::\n\n## Assumptions\n\n::: incremental\n-   Data Comes from a normal distribution ($N(\\mu, \\sigma^2)$)\n-   The population variance $\\sigma^2$ is unknown\n-   Sample is small ($n<30$)\n  -   When $n\\geq30$, use a z-test thanks to [CLT](https://en.wikipedia.org/wiki/Central_limit_theorem)\n  \n:::\n\n## T-statistic\n\n$$\nT = \\frac{\\bar x -\\mu_0}{s/\\sqrt{n}} \\sim t(n-1)\n$$\n\n::: incremental\n-   $\\bar x$: sample mean\n-   $s$: sample standard deviation\n-   $n$: sample size\n:::\n\n## Why t distribution?\n\n$$\nt = \\frac{N(0,1)}{\\sqrt{\\chi^2(n-1)/(n-1)}} \\sim t(n-1)\n$$\nKnowing the distribution will allow us to compute the p-value!\n\n## Monte Carlo Simulations\n\nUse Monte Carlo Simulations to show that transforming a data set to the T-Statistic will yield a t-distribution. Use $H_0: \\mu = 3$ and simulate 24 RV's from $N(3, 9)$. Testing how the distribution will look like assuming that the null hypothesis is true.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nx <- rnorm(24, 3, 3)\n```\n:::\n\n\nAnswer:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nt_stat <- function(i){\n  x <- rnorm(24, 3, 3)\n  tt <- (mean(x) - 3)/(sd(x)/sqrt(24))\n  return(tt)\n}\nt_dist <- sapply(1:100000, t_stat)\nxe <- seq(-5, 5, length.out = 100)\nt_dist |> tibble(x = _) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_line(data = tibble(x = xe, y = dt(xe, 23)),\n            mapping = aes(x,y),\n            col =  \"red\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n# Sampling Distribution\n\n## Sample\n\nA sample is a collection of random variables (data) that is believed to be independent and identically distributed (come from the same distribution).\n\n$$\n\\bX = (X_1, X_2, \\cdots, X_n)^{\\mrT}\n$$\n\n## Statistic\n\nA statistic is a transformation of data by a function.\n\n$$\nT(\\bX)\n$$\n\n## Common Statistics\n|Statistic | Function |\n|:-|:-|\n|Min | $\\mathrm{min}(\\bX)$ |\n|Max | $\\mathrm{max}(\\bX)$ |\n|Mean | $\\frac{1}{n}X_i$ |\n|Median | $P(X_0 < \\bX) = 0.5$ |\n|SD | $\\frac{1}{n-1}\\sum^n_{i=1}(X_i-\\bar X)^2$ |\n\n## Sampling Distributions\n\nA sampling distribution is the distribution of a statistic.\n\n::: fragment\n\n$$\nX_i \\stackrel{iid}{\\sim} N(\\mu, \\sigma^2)\n$$\n\n|Statistic | Distribution |\n|:-|:-|\n|$\\bar X$ | $N(\\mu, \\sigma^2)$ |\n|$(n-1)s^2/\\sigma^2$ | $\\chi^2(n-1)$ |\n\n:::\n\n## Central Limit Theorem\n\nLet $X_1, X_2, \\ldots, X_n$ be identical and independent distributed random variables with $E(X_i)=\\mu$ and $Var(X_i) = \\sigmaÂ²$. We define\n\n$$\nY_n = \\sqrt n \\left(\\frac{\\bar X-\\mu}{\\sigma}\\right) \\mathrm{ where }\\ \\bar X = \\frac{1}{n}\\sum^n_{i=1}X_i.\n$$\n\nThen, the distribution of the function $Y_n$ converges to a standard normal distribution function as $n\\rightarrow \\infty$.\n\n## Obtaining Sampling Distributions\n\nSeveral statistics have distributions that we can conduct inference on such as $t$, $\\chi^2$, and $F$.\n\n::: fragment\nHow do we obtain sampling distributions for other types of statistics?\n:::\n\n::: fragment\n-   Distribution Functions\n-   Density Functions\n-   Moment-Generating Functions\n:::\n\n## Using Monte Carlo Methods\n\n-   The sample generated by simulating random variables is said to follow a distribution function.\n-   The sample itself are the empirical cumulative density function (ECDF) of the true CDF. \n-   Transforming the simulated random variables of the sample are said to construct the ECDF of the statistic's sampling distribution.\n\n\n## Sampling Distribution: $\\bar X$\n\n$$\nX_i \\stackrel{iid}{\\sim} N(5, 2)\n$$\n\n$$\n\\bar X \\sim N(5, 2/n)\n$$\n\n## MC Sampling Distribution: $\\bar X$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nsim1 <- function(i){\n  x <- rnorm(1000, mean = 5, sd = sqrt(2))\n  return(mean(x))\n}\nresults <- replicate(10000, sim1(1))\n\nxe <- seq(4.8, 5.2, length.out = 100)\ntibble(x = results) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_line(data = tibble(x = xe, y = dnorm(xe, 5, sqrt(2/1000))),\n            mapping = aes(x,y),\n            col =  \"red\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## MC Sampling Distribution: $\\hat s^2$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nsim2 <- function(i){\n  x <- rnorm(1000, mean = 5, sd = sqrt(2))\n  return(var(x))\n}\nresults <- replicate(10000, sim2(1))\n\nxe <- seq(850, 1150, length.out = 100)\ntibble(x = 999 * results / 2) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_line(data = tibble(x = xe, y = dchisq(xe, 999)),\n            mapping = aes(x,y),\n            col =  \"red\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n## Maximum\n\n$$\nf_{max} (x) = n f(x) F(x)^{n-1}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsim3 <- function(i){\n  x <- rnorm(1000, mean = 5, sd = sqrt(2))\n  return(max(x))\n}\nresults <- replicate(10000, sim3(1))\n\nxe <- seq(8, 12, length.out = 100)\ntibble(x = results) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_line(data = tibble(x = xe, \n                          y = 1000 * dnorm(xe, 5, sqrt(2)) * pnorm(xe, 5, sqrt(2))^999),\n            mapping = aes(x,y),\n            col =  \"red\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n## Minimum\n\n$$\nf_{min}(x) = n\\{1-F(x)\\}^{n-1}f(x)\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsim4 <- function(i){\n  x <- rnorm(1000, mean = 5, sd = sqrt(2))\n  return(min(x))\n}\nresults <- replicate(10000, sim4(1))\n\nxe <- seq(-2.5, 2, length.out = 100)\ntibble(x = results) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_line(data = tibble(x = xe, \n                          y = 1000 * (1 - pnorm(xe, 5, sqrt(2)))^999 * dnorm(xe, 5, sqrt(2))),\n            mapping = aes(x,y),\n            col =  \"red\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n# Monte Carlo Hypothesis Testing\n\n## Monte Carlo Hypothesis Testing\n\nMonte Carlo hypothesis testing is the process of constructing a sampling distribution of the test statistic given a null distribution.\n\nUsing the test statistic constructed from the sample, identify its the location compared to the emperical cdf.\n\nConduct a hypothesis test based on the location with a Monte Carlo p-value.\n\n## Monte Carlo Algorithm\n\n1. Simulate data from the null distribution ($H_0$)\n\n2. Construct the test statistic from the simulated data.\n\n3. Repeat steps 1 and 2 to construct an empirical distribution of the null hypothesis. \n\n4. Construct the test statistic from the sample data.\n\n5. Count the number of simulated test statistics that are more extreme than the sample test statistic. \n\n6. Compute:\n\n$$\np = \\frac{m +1}{n + 1}\n$$\n\n-   $m$: number of extreme values\n-   $n$: number of simulated test statistics\n\n## Extreme values\n\nExtreme values are values that satisfy these condition:\n\n\n| Hypothesis | Condition |\n|:-|:-|\n| $H_a: \\mu\\ne\\mu_0$ | $|t_{data}| \\leq |t_{sim}|$ |\n| $H_a: \\mu>\\mu_0$   | $t_{data} \\leq t_{sim}$ |\n| $H_0: \\mu<\\mu_0$   | $t_{data} \\geq t_{sim}$ |\n\n## Specifying the Null Distribution\n\nThe null distribution follows the theorized data distribution with parameters related to the null hypothesis and sample size!\n\n::: fragment\n\n\n$$\nH_0: \\mu =\\mu_0\n$$\n$$\nX\\sim N(\\mu, \\sigma^2)\n$$\n:::\n\n## t-test Example\n\nUse a Monte Carlo Hypothesis Test for $H_0: \\mu = 3$ and $H_a: \\mu \\neq 3$. Simulate fake data from 24 RV's from $N(3, 9)$. Testing how the distribution will look like assuming that the null hypothesis is true.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nx <- rnorm(24, 3, 3)\n```\n:::\n\n\nAnswer:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntstat <- (mean(x) - 3)/(sd(x)/sqrt(24))\n\n\nt_stat_sim <- function(i){\n  x <- rnorm(24, 3, 3)\n  tt <- (mean(x) - 3)/(sd(x)/sqrt(24))\n  return(tt)\n}\nt_dist <- sapply(1:100000, t_stat_sim)\n\nt_dist |> tibble(x = _) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(aes(xintercept = tstat), col = \"red\")\n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nsum(abs(tstat) < abs(t_dist))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 69032\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n(sum(abs(tstat) < abs(t_dist)) + 1) / (length(t_dist) + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.6903231\n```\n\n\n:::\n:::\n\n\n\n## t-test Example\n\nUse a Monte Carlo Hypothesis Test for $H_0: \\mu = 6$ and $H_a: \\mu \\neq 6$. Simulate fake data from 24 RV's from $N(3, 9)$. Testing how the distribution will look like assuming that the null hypothesis is true.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nx <- rnorm(24, 3, 3)\n```\n:::\n\n\nAnswer:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntstat <- (mean(x) - 6)/(sd(x)/sqrt(24))\n\n\nt_stat_sim <- function(i){\n  x <- rnorm(24, 6, 3)\n  tt <- (mean(x) - 6)/(sd(x)/sqrt(24))\n  return(tt)\n}\nt_dist <- sapply(1:100000, t_stat_sim)\n\nt_dist |> tibble(x = _) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(aes(xintercept = tstat), col = \"red\")\n\nsum(abs(tstat) < abs(t_dist))\n(sum(abs(tstat) < abs(t_dist)) + 1) / (length(t_dist) + 1)\n```\n:::\n\n\n\n\n## Uniform Example\n\nUsing the sample data, test whether $H_0: \\theta = 10$ vs $H_a: \\theta < 10$ for a sample of 35. You believe that the data came from the a $U(0, \\thetat)$.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ny <- runif(35, 0, 8)\n```\n:::\n\n\nAnswer:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntstat <- max(y)\n\nt_stat_sim <- function(i){\n  x <- runif(35, 0, 10)\n  tt <- max(x)\n  return(tt)\n}\nt_dist <- sapply(1:100000, t_stat_sim)\n\nt_dist |> tibble(x = _) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(aes(xintercept = tstat), col = \"red\")\n\nsum(tstat > t_dist)\n(sum(tstat > t_dist) + 1) / (length(t_dist) + 1)\n```\n:::\n\n\n## Example\n\nThe `fdeaths` data set in R contains the monthly death count from specific lung diseases in the UK from 1974 to 1979. Test whether the monthly average ($theta$) death count is fdeaths is greater than 550?\n\nAnswer:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntstat <- mean(fdeaths)\n\nt_stat_sim <- function(i){\n  x <- rpois(72, 550)\n  tt <- mean(x)\n  return(tt)\n}\nt_dist <- sapply(1:100000, t_stat_sim)\n\nt_dist |> tibble(x = _) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(aes(xintercept = tstat), col = \"red\")\n\nsum(tstat > t_dist)\n(sum(tstat > t_dist) + 1) / (length(t_dist) + 1)\n```\n:::\n\n\n\n\n# Power Analysis\n\n## Type 1 and 2 Error\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\na1 <- data.frame(\n   x = c(2.5,3.5),\n   y = c(41, 41),\n   label = c(\"Yes\", \"No\")\n)\n\na2 <- data.frame(\n   x = c(1.9),\n   y = c(25, 35),\n   label = c(\"False\", \"True\")\n)\na3 <- tibble(x = c(1.7,3), \n             y = c(30, 43), \n             label = c(\"H0\", \"Reject H0\"))\n\nyay <- tibble(x = c(2.5, 3.5), \n              y = c(25, 35), \n              label = c(\"Yay!\", \"Yay!\"))\n\ntype1 <- tibble(x = c(2.5, 3.5),\n                y = c(36.5, 26.5),\n                label = c(\"Type I Error\", \"Type II Error\"))\n\ntype2 <- tibble(x = c(3.5, 2.5),\n                y = c(24.5, 34.5),\n                label = c(\"beta\", \"alpha\"))\n\n\n# basic graph\np <- ggplot() + theme_void()\n\n# Add rectangles\np + annotate(\"rect\", \n             xmin=c(2,3), xmax=c(3,4), \n             ymin=c(20,20), ymax=c(30,30), \n             alpha=0.2, color=\"green\", fill=\"green\") + \n    annotate(\"rect\", \n             xmin=c(2,3), xmax=c(3,4), \n             ymin=c(30,30), ymax=c(40,40), \n             alpha=0.2, color=\"red\", fill=\"red\") +\n    annotate(\"rect\",\n             xmin=c(3,2), xmax=c(4,3),\n             ymin=c(30, 20), ymax=c(40, 30),\n             alpha=0.8, color=\"royalblue\", fill=\"royalblue\") +\n    geom_text(data=a1, aes(x=x, y=y, label=label),\n             size=10 , fontface=\"bold\" ) +\n    geom_text(data=a3, aes(x=x, y=y, label=label),\n             size=10 , fontface=\"bold.italic\" ) +\n    geom_text(data=a2, aes(x=x, y=y, label=label),\n             size=10, angle = 90, fontface=\"bold\" ) +\n    geom_text(data=yay, aes(x=x, y=y, label=label),\n             size=10, fontface=\"bold.italic\" ) +\n    geom_text(data=type1, aes(x=x, y=y, label=label),\n             size=10, fontface=\"bold\") +\n    geom_text(data=type2, aes(x=x, y=y, label=label),\n             size=10, fontface=\"bold\", parse = T ) \n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n\n## Type 1 and 2 Error\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- seq(-4, 4, length.out = 1000)\nxx <- seq(-1, 7, length.out = 1000)\ndt_one<-function(x){\n            y <- dnorm(x)\n            y[x < qnorm(.94)] <-NA\n            return(y)\n}\ndt_two<-function(x){\n            y <- dnorm(x, mean = 3)\n            y[x > 1.645] <-NA\n            return(y)\n}\ndf1 <- tibble(x = x, y = dnorm(x))\ndf2 <- tibble(x = xx, y = dnorm(xx, mean = 3))\n\na1 <- tibble(x = c(0,3), y = c(0.43, 0.43), label = c(\"H0\", \"H1\"))\na2 <- tibble(x = c(2.05,1.25), y = c(0.02, 0.02), label = c(paste(\"alpha\"), \"beta\"))\n\ndf1 |> \n  ggplot(aes(x, y)) +\n    stat_function(fun = dt_one, geom = \"area\", fill = \"red\") +\n    geom_line() +\n    geom_line(aes(x, y), df2) +\n    stat_function(fun = dt_two, geom = \"area\", fill = \"green\") +\n    geom_vline(aes(xintercept = 1.645), lwd = 1.5) +\n    geom_text(data=a1, aes(x=x,y=y, label=label),\n              size=14 , fontface=\"bold.italic\" ) +\n    geom_text(data=a2, aes(x=x,y=y, label=label),\n              size=10 , fontface=\"bold.italic\", parse = T) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Power\n\nPower is the probability of rejecting $H_0$ given that $H_1$.\n\n$$\nPower  = 1-\\beta\n$$\n\n## Power\n\nWe want to ensure we have a high power and low type I error rate ($\\alpha$).\n\n::: fragment\nAs practitioners, we control $\\alpha$. Set it before we conduct a study. Usually set at 0.05.\n:::\n\n::: fragment\nWe cannot control power because it is dependent by effect size, $\\alpha$, and sample size.\n:::\n\n## Power Relationships\n\n-   $\\alpha \\uparrow$ $\\rightarrow$ $Power\\ \\uparrow$\n-   $n \\uparrow$ $\\rightarrow$ $Power\\ \\uparrow$\n\n## Power Analysis in R\n\nThe `pwr` package in R will conduct power and sample size for several common statistical tests. For more information, you can check this [vignette](https://cran.r-project.org/web/packages/pwr/vignettes/pwr-vignette.html) and their [github](https://github.com/heliosdrm/pwr).\n\n## Conceptial\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- seq(-4, 4, length.out = 1000)\nxx <- seq(-1, 7, length.out = 1000)\ndt_one<-function(x){\n            y <- dnorm(x)\n            y[x < qnorm(.94)] <-NA\n            return(y)\n}\ndt_two<-function(x){\n            y <- dnorm(x, mean = 3)\n            y[x > 1.645] <-NA\n            return(y)\n}\ndf1 <- tibble(x = x, y = dnorm(x))\ndf2 <- tibble(x = xx, y = dnorm(xx, mean = 3))\n\na1 <- tibble(x = c(0,3), y = c(0.43, 0.43), label = c(\"H0\", \"H1\"))\na2 <- tibble(x = c(2.05,1.25), y = c(0.02, 0.02), label = c(paste(\"alpha\"), \"beta\"))\n\ndf1 |> \n  ggplot(aes(x, y)) +\n    stat_function(fun = dt_one, geom = \"area\", fill = \"red\") +\n    geom_line() +\n    geom_line(aes(x, y), df2) +\n    stat_function(fun = dt_two, geom = \"area\", fill = \"green\") +\n    geom_vline(aes(xintercept = 1.645), lwd = 1.5) +\n    geom_text(data=a1, aes(x=x,y=y, label=label),\n              size=14 , fontface=\"bold.italic\" ) +\n    geom_text(data=a2, aes(x=x,y=y, label=label),\n              size=10 , fontface=\"bold.italic\", parse = T) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](5_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}