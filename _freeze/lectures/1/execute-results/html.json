{
  "hash": "506564fc9fe699a3f98238b166af19b3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Welcome to Math 497\"\nsubtitle: \"Intro to Monte Carlo Methods\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nengine: knitr\nknitr:\n  opts_chunk: \n    echo: true\n    eval: false\n    comment: \"#>\" \n\n\nrevealjs-plugins:\n  - verticator\n  \nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - code-fullscreen\n  - webr\n\nwebr: \n  show-startup-message: true\n---\n\n\n## Introductions\n\n-   San Bernardino, CA\n\n-   CSU Monterey Bay\n\n    -   BS Biology\n\n-   San Diego State University\n\n    -   Master's in Public Health\n\n-   UC Riverside\n\n    -   PhD in Applied Statistics\n\n## Introductions\n\n-   Name\n\n-   Year\n\n-   Major\n\n-   Fun Fact\n\n-   Career Goal\n\n## Goals for the Course\n\n-   Gain R Programming Skills\n\n-   Learn Different Monte Carlo Methods\n\n-   Conduct Simulation Studies\n\n\n\n# Syllabus\n\n## Syllabus\n\n[Syllabus](https://m497.inqs.info/syllabus.html)\n\n## Books\n-   Statistical Computing (SC)\n    -   Isaac Quintanilla Salinas\n    -   <https://www.inqs.info/stat_comp/>\n    -   <https://hypothes.is/groups/xMmDdj2A/m408>\n\n# Introduction to R\n\n## R Programming\n\nR is a statistical programming package that allows you to conduct different types of analysis.\n\n[R](https://www.r-project.org/)\n\n## RStudio\n\nA piece of software that organizes how you conduct statistical analysis in R.\n\n[RStudio](https://posit.co/downloads/)\n\n## Posit Cloud\n\nA web version of RStudio.\n\n[Posit Cloud](https://posit.cloud/login)\n\n## R Packages\n\n-   Tidyverse\n\n-   csucistats\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('csucistats', \n                 repos = c('https://inqs909.r-universe.dev', \n                           'https://cloud.r-project.org'))\n```\n:::\n\n\n\n# R Basics\n\n## R as a calculator\n\nR can evaluate different expressions in the console tab.\n\nTry the following:\n\n1.  $4(4+2)/34$\n2.  $6^3$\n3.  $3-1$\n4.  $4+4/3+45(32*34-54)$\n\n## R Calculator\n\n```{webr-r}\n\n```\n\n## R Functions\n\nR functions performs tasks to specific data values.\n\nEvaluate the following values in R:\n\n1.  $\\sqrt{3}$\n2.  $e^3$\n3.  $\\ln(53)$\n4.  $\\log(324)$\n5.  $\\sin(3)$\n6.  $\\sin(3\\pi)$\n\n## R Functions\n\n```{webr-r}\n\n```\n\n## Types of Data\n\n-   Numeric\n\n-   Character\n\n-   Logical\n\n-   Missing\n\nEvaluate the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.numeric(1)\nis.numeric(\"1\")\nis.numeric(T)\nis.numeric(NA)\n```\n:::\n\n\n## Types of Data\n\n```{webr-r}\n\n```\n\n\n## Types of Objects\n\nIn R, an object contains a set of data. The most common types are `vectors` and `matrix`.\n\nRun this code and print out the objects in the console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3:34\ny <- matrix(1:20, nrow = 4)\n```\n:::\n\n\n## Types of objects\n\n```{webr-r}\n\n```\n\n\n## Vectors\n\nUse the `c()` function to create a container of data objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,2,5,6:19, 3)\ny <- c(3, 4,909,456,48,56)\nz <- c(x, y, 134590)\n```\n:::\n\n\n\n## Data Frames\n\nData frames can be thought of as R's version of a data set.\n\nPlay around with mtcars:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n#> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n#> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n#> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n#> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n#> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n#> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n#> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n#> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n#> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n#> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n#> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n#> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n#> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n#> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n#> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n#> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n#> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n#> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n#> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n#> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n#> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n#> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n\n\n:::\n:::\n\n\n## Lists\n\nList can be thought as an extended vector, but each element is a different R object.\n\nTry playing with this R object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_one <- list(mtcars, rep(0, 4),\n                 diag(rep(1, 3)))\n```\n:::\n\n\n## Lists\n\n```{webr-r}\n\n```\n\n\n## Control Flow\n\nThe order a computer will complete tasks.\n\nUsually incorporates statements and loops.\n\n# Indexing\n\n## Indexing\n\nWithin an R object, you can access an element by indexing it.\n\nIndexing tells R which values to output.\n\n## Vectors\n\nA vector can be indexed by adding `[]` after the object's name and specifying the number of each element.\n\n```{webr-r}\nletters\nletters[13]\n```\n\n## Matrices\n\nA matrix can be indexed by adding `[]` after the object's name and specifying the number of each element. Separate the values by commas for specific indexes.\n\n```{webr-r}\nx <- matrix(1:40, nrow = 4)\n```\n\n\n# Comparing Numbers\n\n## Comparing Numbers\n\nYou can compare two numbers, or objects, that will result in a logical output.\n\n## Comparing Numbers Operators\n\n| Operator | Description           |\n|----------|-----------------------|\n| `>`      | Greater Than          |\n| `<`      | Less Than             |\n| `>=`     | Greater than or equal |\n| `<=`     | Less than or equal    |\n| `==`     | Equals                |\n| `!=`     | Not Equals            |\n\n## Comparing Vectors\n\nWhen you compare a number to a vector, it will result as a logical vector.\n\n## Example\n\nTry the following code and explain what is happening:\n\n```{webr-r}\n4 > 1:8\n\n1:8 > 4\n```\n\n# `if`/`else` Statements\n\n## if/else Statements\n\nif/else statements are used to conduct specific tasks depending on the conditions\n\n## `if` Statement\n\nAn `if` statement is used to if you want R to perform a specific function if a certain condition is met. An `if` statement will only run a task if a logical is returned. You will need type `if`, followed by the condition (as a logical) in parentheses, then the task.\n\n## Example\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0){\n  print(\"Positive\")\n}\nprint(x)\n\n```\n\n## else statement\n\nAn `else` statement will conduct a different task if the `if` statement does not conduct the tasks.\n\n## Example\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  print(\"Positive\")\n} else {\n  print(\"Non-positive\")\n} \nprint(x)\n\n```\n\n## Chain if/else statement\n\nIf you have more than two options, you can chain `if/else` statements by adding an `if` statement immediately after the word `else`.\n\n## Example\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  print(\"Positive\")\n} else if (x == 0) {\n  print(\"Zero\")\n} else {\n  print(\"Negative\")\n}\nprint(x)\n\n```\n\n# `try()`\n\n## `try()`\n\nThe `try()` is an extremely powerful function that will prevent a code from stopping if an error occurs.\n\n## Example\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  stop(\"This is an error\")\n  print(\"Positive\")\n} else if (x == 0) {\n  print(\"Zero\")\n} else {\n  stop(\"This is an error\")\n  print(\"Negative\")\n}\nprint(x)\n\n```\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  try(stop(\"This is an error\"))\n  print(\"Positive\")\n} else if (x == 0) {\n  print(\"Zero\")\n} else {\n  try(stop(\"This is an error\"))\n  print(\"Negative\")\n}\nprint(x)\n\n```\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  try(stop(\"This is an error\"), silent = T)\n  print(\"Positive\")\n} else if (x == 0) {\n  print(\"Zero\")\n} else {\n  try(stop(\"This is an error\"), silent = T)\n  print(\"Negative\")\n}\nprint(x)\n\n```\n\n# `for` Loops\n\n## `for` Loops\n\n`for` loops are used to conduct an iterative task with slight changes to the input. The general format goes as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (index in vector){\n  Conduct task\n}\n```\n:::\n\n\nYou will repeat the `for` loop untie all the elements in the vector have been used.\n\n## Example\n\nCompute the mean:\n\n$$\n\\bar x = \\frac{1}{n}\\sum^n_{i=1}x_i\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(100)\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.01628863\n```\n\n\n:::\n:::\n\n\n## Example\n\n```{webr-r}\n\n```\n\n\n## Example\n\nCompute the variance:\n\n$$\ns^2 = \\frac{1}{n-1}\\sum^n_{i-1}(x_i-\\bar x)^2\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(100)\nvar(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 1.124356\n```\n\n\n:::\n:::\n\n\n## Example\n\n```{webr-r}\n\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}